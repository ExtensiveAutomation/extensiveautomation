(lp0
(dp1
S'type'
p2
S'package'
p3
sS'modules'
p4
(lp5
(dp6
S'desc'
p7
S'This library enable to create testcase with step support.'
p8
sS'classes'
p9
(lp10
(dp11
S'functions'
p12
(lp13
(dp14
S'args'
p15
(lp16
S'parent'
p17
asg2
S'method'
p18
sS'name'
p19
S'__init__'
p20
sg7
S'\n        Constructor for a break point\n        '
p21
sasg2
S'class'
p22
sg19
S'BreakPoint'
p23
sg7
S'\n    Add a break point \n    '
p24
sa(dp25
g12
(lp26
(dp27
g15
(lp28
sg2
g18
sg19
S'all'
p29
sg7
S'\n        Return all content from the cache\n        \n        @return: content\n        @rtype: object/none\n        '
p30
sa(dp31
g15
(lp32
S'data'
p33
aS'regexp'
p34
asg2
g18
sg19
S'capture'
p35
sg7
S'\n        Capture group of characters and save it in cache\n        \n        @param data: raw data\n        @type name: string\n        \n        @param regexp: reg exp used to capture string (example: (?P<R>.*) ) \n        @type regexp: string\n        '
p36
sa(dp37
g15
(lp38
g19
asg2
g18
sg19
S'delete'
p39
sg7
S'\n        Delete data from the temporary storage according to the name passed as argument.\n\n        @param name: key name\n        @type name: string\n        \n        @return: True on success, False otherwise\n        @rtype: boolean\n        '
p40
sa(dp41
g15
(lp42
g19
asg2
g18
sg19
S'get'
p43
sg7
S'\n        Load data from the temporary storage according to the name passed as argument.\n        \n        @param name: key name\n        @type name: string\n        \n        @return: data saved or None if empty\n        @rtype: object/none\n        '
p44
sa(dp45
g2
g18
sg15
(lp46
g29
asS'default-args'
p47
(lp48
(g29
I00
tp49
asg19
S'reset'
p50
sg7
S'\n        Reset data from the temporary storage.\n        Reminder: all keys startswiths "_" are not removed\n        '
p51
sa(dp52
g2
g18
sg15
(lp53
g19
ag33
aS'flag'
p54
asg47
(lp55
(g54
I00
tp56
asg19
S'set'
p57
sg7
S'\n        Save data in the temporary storage. \n        Prefix the name with _ if you want to keep the key in the cache even with a reset\n       \n        @param name: key name\n        @type name: string\n        \n        @param data: data to save\n        @type data: string/object\n        '
p58
sasg2
g22
sg19
S'Cache'
p59
sg7
S'\n    Cache storage based on key, value\n    Shared between all testcases.\n    '
p60
sa(dp61
g12
(lp62
(dp63
g2
g18
sg15
(lp64
S'ask'
p65
aS'timeout'
p66
aS'default'
p67
aS'cache'
p68
asg47
(lp69
(g66
F30.0
tp70
a(g67
S'None'
p71
tp72
a(g68
S''
p73
tp74
asg19
S'interact'
p75
sg7
S'\n        Ask a value to the tester during the execution of a test\n\n        @param ask: ask what\n        @type ask: string\n\n        @param default: provide a default value\n        @type default: string/none\n\n        @param cache: max time to respond (default=30s)\n        @type cache: float\n        \n        @param timeout: key name\n        @type timeout: string\n\n        @return: user response\n        @rtype: string\n        '
p76
sasg2
g22
sg19
S'Interact'
p77
sg7
S'\n    Interact with user\n    '
p78
sa(dp79
g12
(lp80
(dp81
g15
(lp82
g17
asg2
g18
sg19
g20
sg7
S'\n        Constructor for a break point\n        Parent should be equal to a testcase\n        '
p83
sa(dp84
g15
(lp85
S'folder'
p86
asg2
g18
sg19
S'addFolder'
p87
sg7
S'\n        Add folder in the private area\n\n        @param folder: folder name to add\n        @type folder: string\n        '
p88
sa(dp89
g15
(lp90
S'destname'
p91
ag33
asg2
g18
sg19
S'appendFile'
p92
sg7
S'\n        Append binary data in file. These datas are accessible in the archives.\n\n        @param destname: destination name\n        @type destname: string\n\n        @param data: data to save\n        @type data: string\n        '
p93
sa(dp94
g15
(lp95
S'filename'
p96
asg2
g18
sg19
S'getFile'
p97
sg7
S'\n        Get file in private area\n        \n        @param filename: filename to read\n        @type filename: string\n        \n        @return: file content\n        @rtype: string\n        '
p98
sa(dp99
g15
(lp100
sg2
g18
sg19
S'getPath'
p101
sg7
S'\n        Return path to access to the private area of the testcase\n        \n        @return: public path\n        @rtype: string\n        '
p102
sa(dp103
g15
(lp104
g91
ag33
asg2
g18
sg19
S'saveFile'
p105
sg7
S'\n        Storing binary data in file. These datas are accessible in the archives.\n\n        @param destname: destination name\n        @type destname: string\n\n        @param data: data to save\n        @type data: string\n        '
p106
sasg2
g22
sg19
S'Private'
p107
sg7
S'\n    Private storage files\n    '
p108
sa(dp109
g12
(lp110
(dp111
g15
(lp112
g17
asg2
g18
sg19
g20
sg7
S'\n        Constructor for a break point\n        Parent should be equal to a testcase\n        '
p113
sa(dp114
g15
(lp115
g86
asg2
g18
sg19
g87
sg7
S'\n        Add folder in the public area\n\n        @param folder: folder name to add\n        @type folder: string\n        '
p116
sa(dp117
g15
(lp118
S'pathfile'
p119
ag33
asg2
g18
sg19
g92
sg7
S'\n        Append data in file in public area\n\n        @param pathfile: destination path file\n        @type pathfile: string\n\n        @param data: data to save\n        @type data: string\n        '
p120
sa(dp121
g15
(lp122
g119
asg2
g18
sg19
g97
sg7
S'\n        Get file from the public area\n        \n        @param pathfile: filename to read\n        @type pathfile: string\n        \n        @return: file content\n        @rtype: string\n        '
p123
sa(dp124
g15
(lp125
sg2
g18
sg19
g101
sg7
S'\n        Return path to access to public area\n        \n        @return: public path\n        @rtype: string\n        '
p126
sa(dp127
g15
(lp128
g119
ag33
asg2
g18
sg19
g105
sg7
S'\n        Save file in public area\n\n        @param pathfile: destination path file\n        @type pathfile: string\n\n        @param data: data to save\n        @type data: string\n        '
p129
sasg2
g22
sg19
S'Public'
p130
sg7
S'\n    Public storage files\n    '
p131
sa(dp132
g12
(lp133
(dp134
g2
g18
sg15
(lp135
g17
aS'tcid_'
p136
aS'id_'
p137
aS'expected_'
p138
aS'action_'
p139
aS'summary_'
p140
aS'enabled'
p141
aS'thumbnail'
p142
asg47
(lp143
(g141
I01
tp144
a(g142
S'None'
p145
tp146
asg19
g20
sg7
S'\n        Constructor for a step\n\n        @param tcid_:\n        @type tcid_:\n\n        @param id_:\n        @type id_:\n\n        @param expected_:\n        @type expected_:\n\n        @param action_:\n        @type action_:\n\n        @param summary_:\n        @type summary_:\n        '
p147
sa(dp148
g15
(lp149
sg2
g18
sg19
S'getId'
p150
sg7
S'\n        Return id\n        '
p151
sa(dp152
g15
(lp153
sg2
g18
sg19
S'isEnabled'
p154
sg7
S'\n        Return True if the step is enabled\n\n        @return: True for enabled, False otherwise\n        @rtype: boolean\n        '
p155
sa(dp156
g15
(lp157
S'description'
p158
asg2
g18
sg19
S'setDescription'
p159
sg7
S'\n        Set action to execute the step\n\n        @param description: description\n        @type description: string\n        '
p160
sa(dp161
g15
(lp162
sg2
g18
sg19
S'setDisabled'
p163
sg7
S'\n        Disable the step\n\n        '
p164
sa(dp165
g15
(lp166
sg2
g18
sg19
S'setEnabled'
p167
sg7
S'\n        Enable the step\n        '
p168
sa(dp169
g15
(lp170
S'expected'
p171
asg2
g18
sg19
S'setExpected'
p172
sg7
S'\n        Step the result expected\n\n        @param expected: expected\n        @type expected: string\n        '
p173
sa(dp174
g2
g18
sg15
(lp175
S'actual'
p176
ag142
aS'chart'
p177
asg47
(lp178
(g142
S'None'
p179
tp180
a(g177
S'None'
p181
tp182
asg19
S'setFailed'
p183
sg7
S'\n        Set the result of the testcase to failed\n\n        @param actual: result description\n        @type actual: string\n        \n        @param thumbnail: image (default=None)\n        @type thumbnail: string/none\n        \n        @param chart: chart, only displayed in html report (default=None)\n        @type chart: string/none\n        '
p184
sa(dp185
g2
g18
sg15
(lp186
g176
ag142
ag177
asg47
(lp187
(g142
S'None'
p188
tp189
a(g177
S'None'
p190
tp191
asg19
S'setPassed'
p192
sg7
S'\n        Set the result of the testcase to passed\n\n        @param actual: result description\n        @type actual: string\n        \n        @param thumbnail: image (default=None)\n        @type thumbnail: string/none\n        \n        @param chart: chart, only displayed in html report (default=None)\n        @type chart: string/none\n        '
p193
sa(dp194
g15
(lp195
S'summary'
p196
asg2
g18
sg19
S'setSummary'
p197
sg7
S'\n        Set the summary\n\n        @param summary: summary\n        @type summary: string\n        '
p198
sa(dp199
g15
(lp200
sg2
g18
sg19
S'start'
p201
sg7
S'\n        Begin to run the step\n        '
p202
sasg2
g22
sg19
S'Step'
p203
sg7
S'\n    Step with definition result support.\n\n    3 states supported:\n        - UNDEFINED\n        - FAIL\n        - PASSED\n    '
p204
sa(dp205
g12
(lp206
(dp207
g2
g18
sg15
(lp208
S'err'
p209
asg47
(lp210
(g209
S'None'
p211
tp212
asg19
S'interrupt'
p213
sg7
S'\n        Use this function to stop the testcase before the end\n        Cleanup is called automatically and the aborted argument contains the reason of the interruption\n        \n        @param err: error message\n        @type err: string/none\n        '
p214
sa(dp215
g2
g18
sg15
(lp216
g209
asg47
(lp217
(g209
S'None'
p218
tp219
asg19
S'terminate'
p220
sg7
S'\n        Use this function to stop the test before the end\n        Cleanup is called automatically and the aborted argument contains the reason of the termination\n        \n        @param err: error message\n        @type err: string/none\n        '
p221
sasg2
g22
sg19
S'Test'
p222
sg7
S'\n    Test handler\n    '
p223
sa(dp224
g12
(lp225
(dp226
g2
g18
sg15
(lp227
S'suffix'
p228
aS'testName'
p229
asg47
(lp230
(g228
S'None'
p231
tp232
a(g229
S'None'
p233
tp234
asg19
g20
sg7
S'\n        Construct TestCase\n        '
p235
sa(dp236
g2
g18
sg15
(lp237
g171
ag158
ag196
ag141
ag142
asg47
(lp238
(g141
I01
tp239
a(g142
S'None'
p240
tp241
asg19
S'addStep'
p242
sg7
S'\n        Add step to the testcase with description and expected result passed as arguments.\n\n        @param expected: describe expected result\n        @type expected: string\n\n        @param description: step description\n        @type description: string\n\n        @param summary: very short description\n        @type summary: string\n        \n        @param enabled: enable the step (default=True)\n        @type enabled: boolean\n        \n        @param thumbnail: image (default=None)\n        @type thumbnail: string/none\n        \n        @return: step object\n        @rtype: Step\n        '
p243
sa(dp244
g2
g18
sg15
(lp245
S'leftA'
p246
aS'conditionA'
p247
aS'rightA'
p248
aS'leftB'
p249
aS'conditionB'
p250
aS'rightB'
p251
aS'AND'
p252
aS'OR'
p253
aS'XOR'
p254
asg47
(lp255
(g248
S'None'
p256
tp257
a(g249
g73
tp258
a(g250
S'None'
p259
tp260
a(g251
S'None'
p261
tp262
a(g252
I01
tp263
a(g253
I00
tp264
a(g254
I00
tp265
asg19
S'condition'
p266
sg7
S'\n        Make several conditions, used on test abstract\n\n        @param leftA: left value for condition A\n        @type leftA: string\n\n        @param conditionA: first A\n        @type conditionA: condition\n\n        @param rightA: right value for condition A\n        @type rightA: string/boolean/none\n\n        @param leftB: left value for condition A\n        @type leftB: string\n\n        @param conditionB: first A\n        @type conditionB: condition/none\n\n        @param rightB: right value for condition A\n        @type rightB: string/boolean/none\n\n        @param AND: and between condition\n        @type AND: boolean\n\n        @param OR: and between condition\n        @type OR: boolean\n\n        @param XOR: and between condition\n        @type XOR: boolean\n\n        @return: True if OK False otherwise\n        @rtype: boolean\n        '
p267
sa(dp268
g15
(lp269
g19
asg2
g18
sg19
S'findAdapter'
p270
sg7
S'\n        Return adapter in shared mode according to the name\n\n        @param name: adapter name\n        @type name: string\n\n        @return: adapter objected or not if not found\n        @rtype: adapter\n        '
p271
sa(dp272
g15
(lp273
sg2
g18
sg19
g150
sg7
S'\n        Return the id of the testcase\n        \n        @return: testcase id\n        @rtype: integer\n        '
p274
sa(dp275
g15
(lp276
sg2
g18
sg19
S'getPreviousStep'
p277
sg7
S'\n        Return the previous step if exists otherwise none\n\n        @return: step object\n        @rtype: step/none\n        '
p278
sa(dp279
g15
(lp280
g158
asg2
g18
sg19
S'label'
p281
sg7
S'\n        Label function, used on test abstract\n\n        @param description: description\n        @type description: label\n        '
p282
sa(dp283
g15
(lp284
g19
asg2
g18
sg19
S'setName'
p285
sg7
S'\n        Set the name of the testcase\n\n        @param name: testcase name\n        @type name: string\n        '
p286
sa(dp287
g15
(lp288
S'purpose'
p289
asg2
g18
sg19
S'setPurpose'
p290
sg7
S'\n        Set the purpose of the testcase\n\n        @param purpose: purpose description\n        @type purpose: string\n        '
p291
sa(dp292
g15
(lp293
S'requirement'
p294
asg2
g18
sg19
S'setRequirement'
p295
sg7
S'\n        Set the requirement of the testcase\n\n        @param requirement: requirement description\n        @type requirement: string\n        '
p296
sasg2
g22
sg19
S'TestCase'
p297
sg7
S'\n    Basic test case with steps definition support.\n\n    @param suffix: add a suffix to the testcase name\n    @type suffix: string \n    '
p298
sa(dp299
g12
(lp300
(dp301
g2
g18
sg15
(lp302
S'fmt'
p303
aS'timeshift'
p304
asg47
(lp305
(g303
S'%Y-%m-%d %H:%M:%S'
p306
tp307
a(g304
I00
tp308
asg19
S'local'
p309
sg7
S'\n        Return local time\n        \n        @param fmt: date and time format (default=%Y-%m-%d %H:%M:%S)\n        @type fmt: string\n        \n        @param timeshift: with timeshift (default=False)\n        @type timeshift: boolean\n        \n        @return: local time\n        @rtype: string\n        '
p310
sa(dp311
g2
g18
sg15
(lp312
g66
aS'localshift'
p313
asg47
(lp314
(g313
I01
tp315
asg19
S'sleep'
p316
sg7
S'\n        Sleep in seconds with time shifting support\n        \n        @param timeout: in second\n        @type timeout: integer\n        \n        @param localshift: local shift (default=True)\n        @type localshift: boolean\n        '
p317
sa(dp318
g2
g18
sg15
(lp319
S'dt'
p320
ag303
ag313
aS'delta'
p321
asg47
(lp322
(g320
S'1970-01-01 00:00:00'
p323
tp324
a(g303
g306
tp325
a(g313
I01
tp326
a(g321
I0
tp327
asg19
S'sleepUntil'
p328
sg7
S'\n        Sleep until a specific date and time with time shifting support\n        \n        @param dt: date and time (default=1970-01-01 00:00:00)\n        @type dt: string\n        \n        @param fmt: date and time format (default=%Y-%m-%d %H:%M:%S)\n        @type fmt: string\n        \n        @param localshift: local shift (default=True)\n        @type localshift: boolean\n\n        @param delta: shift the date in seconds (default=0s)\n        @type delta: integer\n        '
p329
sa(dp330
g2
g18
sg15
(lp331
g303
ag304
asg47
(lp332
(g303
g306
tp333
a(g304
I00
tp334
asg19
S'utc'
p335
sg7
S'\n        Return UTC time\n        \n        @param fmt: date and time format (default=%Y-%m-%d %H:%M:%S)\n        @type fmt: string\n        \n        @param timeshift: with timeshift (default=False)\n        @type timeshift: boolean\n        \n        @return: utc time\n        @rtype: string\n        '
p336
sa(dp337
g15
(lp338
g66
asg2
g18
sg19
S'wait'
p339
sg7
S'\n        Just wait during the timeout passed as argument\n\n        @param timeout: in second\n        @type timeout: float\n        '
p340
sa(dp341
g2
g18
sg15
(lp342
g320
ag303
ag321
asg47
(lp343
(g320
g323
tp344
a(g303
g306
tp345
a(g321
I0
tp346
asg19
S'waitUntil'
p347
sg7
S'\n        Just wait until the date and time passed in argument\n\n        @param dt: date and time (default=1970-01-01 00:00:00)\n        @type dt: string\n        \n        @param fmt: date and time format (default=%Y-%m-%d %H:%M:%S)\n        @type fmt: string\n\n        @param delta: shift the date in seconds (default=0s)\n        @type delta: integer\n        '
p348
sasg2
g22
sg19
S'Timer'
p349
sg7
S'\n    Time handler\n    '
p350
sa(dp351
g12
(lp352
(dp353
g2
g18
sg15
(lp354
S'txt'
p355
aS'bold'
p356
aS'italic'
p357
aS'multiline'
p358
aS'raw'
p359
asg47
(lp360
(g356
I00
tp361
a(g357
I00
tp362
a(g358
I00
tp363
a(g359
I00
tp364
asg19
S'error'
p365
sg7
S'\n        Display an error message\n        Nothing is displayed if txt is None\n\n        @param txt: text message\n        @type txt: string\n\n        @param bold: text is rendered as bold (default=False)\n        @type bold: boolean\n\n        @param italic: text is rendered as italic (default=False)\n        @type italic: boolean\n\n        @param raw: text is rendered as raw data, html otherwise (default=False)\n        @type raw: boolean\n        '
p366
sa(dp367
g2
g18
sg15
(lp368
g355
ag356
ag357
ag358
ag359
asg47
(lp369
(g356
I00
tp370
a(g357
I00
tp371
a(g358
I00
tp372
a(g359
I00
tp373
asg19
S'info'
p374
sg7
S'\n        Display an information message\n        Nothing is displayed if txt is None\n\n        @param txt: text message\n        @type txt: string\n\n        @param bold: text is rendered as bold (default=False)\n        @type bold: boolean\n\n        @param italic: text is rendered as italic (default=False)\n        @type italic: boolean\n\n        @param raw: text is rendered as raw data, html otherwise (default=False)\n        @type raw: boolean\n        '
p375
sa(dp376
g2
g18
sg15
(lp377
g355
ag356
ag357
ag358
ag359
asg47
(lp378
(g356
I00
tp379
a(g357
I00
tp380
a(g358
I00
tp381
a(g359
I00
tp382
asg19
S'warning'
p383
sg7
S'\n        Display an warning message\n        Nothing is displayed if txt is None\n\n        @param txt: text message\n        @type txt: string\n\n        @param bold: text is rendered as bold (default=False)\n        @type bold: boolean\n\n        @param italic: text is rendered as italic (default=False)\n        @type italic: boolean\n\n        @param raw: text is rendered as raw data, html otherwise (default=False)\n        @type raw: boolean\n        '
p384
sasg2
g22
sg19
S'Trace'
p385
sg7
S'\n    Trace message in your test\n    '
p386
sasg2
S'module'
p387
sg19
S'TestExecutor'
p388
sS'realname'
p389
S'TestExecutorLib.TestExecutorLib'
p390
sa(dp391
g7
S'The library provides somes importants operators.'
p392
sg9
(lp393
(dp394
g12
(lp395
(dp396
g15
(lp397
sg2
g18
sg19
g20
sg7
S'\n        This class provides an operator to match anything\n        '
p398
sasg2
g22
sg19
S'Any'
p399
sg7
S'\n    Any\n    '
p400
sa(dp401
g12
(lp402
(dp403
g2
g18
sg15
(lp404
S'needle'
p405
ag252
ag253
asg47
(lp406
(g252
I01
tp407
a(g253
I00
tp408
asg19
g20
sg7
S'\n        This class provides an operator to check if a string contains the characters passed as argument.\n\n        @param needle: the string(s) to search\n        @type needle: string or list\n\n        @param AND: and condition (default=True)\n        @type AND: boolean\n\n        @param OR: or condition (default=False)\n        @type OR: boolean\n        '
p409
sa(dp410
g15
(lp411
S'haystack'
p412
asg2
g18
sg19
S'seekIn'
p413
sg7
S'\n        Seeking needle in the haystack\n        If needle is found, returns True. \n\n        @param haystack: the string to search in\n        @type haystack: string\n    \n        @return: True if needle found \n        @rtype: boolean\n        '
p414
sasg2
g22
sg19
S'Contains'
p415
sa(dp416
g12
(lp417
(dp418
g15
(lp419
g405
asg2
g18
sg19
g20
sg7
S'\n        This class provides an operator to check if a string ends with the characters passed as argument.\n\n        @param needle: the string to search\n        @type needle: string\n        '
p420
sa(dp421
g15
(lp422
g412
asg2
g18
sg19
g413
sg7
S'\n        Seeking needle in the haystack\n        If needle is found, returns True. \n\n        @param haystack: the string to search in\n        @type haystack: string\n\n        @return: True if needle found on the end\n        @rtype: boolean\n        '
p423
sasg2
g22
sg19
S'Endswith'
p424
sa(dp425
g12
(lp426
(dp427
g2
g18
sg15
(lp428
S'x'
p429
aS'equal'
p430
asg47
(lp431
(g430
I00
tp432
asg19
g20
sg7
S'\n        This class provides an operator to check if an integer is greater than the value passed as argument.\n\n        @param x: integer to compare\n        @type x: float or integer\n\n        @param equal: greater or equal than (default=False)\n        @type equal: boolean\n        '
p433
sa(dp434
g15
(lp435
S'y'
p436
asg2
g18
sg19
S'comp'
p437
sg7
S'\n        Compare y with x\n        If y is greater than x, returns True\n\n        @param y: integer to compare\n        @type y: float or integer\n\n        @return: True if greater \n        @rtype: boolean\n        '
p438
sasg2
g22
sg19
S'GreaterThan'
p439
sa(dp440
g12
(lp441
(dp442
g2
g18
sg15
(lp443
g429
ag430
asg47
(lp444
(g430
I00
tp445
asg19
g20
sg7
S'\n        This class provides an operator to check if an integer is lower than the value passed as argument.\n\n        @param x: integer to compare\n        @type x: float or integer\n\n        @param equal: greater or equal than (default=False)\n        @type equal: boolean\n        '
p446
sa(dp447
g15
(lp448
g436
asg2
g18
sg19
g437
sg7
S'\n        Compare y with x\n        If y is lower than x, returns True\n\n        @param y: integer to compare\n        @type y: float or integer\n\n        @return: True if lower \n        @rtype: boolean\n        '
p449
sasg2
g22
sg19
S'LowerThan'
p450
sa(dp451
g12
(lp452
(dp453
g2
g18
sg15
(lp454
g405
ag252
ag253
asg47
(lp455
(g252
I01
tp456
a(g253
I00
tp457
asg19
g20
sg7
S'\n        This class provides an operator to check if a string not constains the characters passed as argument.\n\n        @param needle: the string(s) to search\n        @type needle: string or list\n\n        @param AND: and condition (default=True)\n        @type AND: boolean\n\n        @param OR: or condition (default=False)\n        @type OR: boolean\n        '
p458
sa(dp459
g15
(lp460
g412
asg2
g18
sg19
g413
sg7
S'\n        Seeking needle in the haystack\n        If needle is not found, returns True. \n\n        @param haystack: the string to search in\n        @type haystack: string\n\n        @return: True if needle not found \n        @rtype: boolean\n        '
p461
sasg2
g22
sg19
S'NotContains'
p462
sa(dp463
g12
(lp464
(dp465
g15
(lp466
g405
asg2
g18
sg19
g20
sg7
S'\n        This class provides an operator to check if a string not ends with the characters passed as argument.\n\n        @param needle: the string to search\n        @type needle: string\n        '
p467
sa(dp468
g15
(lp469
g412
asg2
g18
sg19
g413
sg7
S'\n        Seeking needle in the haystack\n        If needle is not found, returns True. \n\n        @param haystack: the string to search in\n        @type haystack: string\n\n        @return: True if needle not found on the end\n        @rtype: boolean\n        '
p470
sasg2
g22
sg19
S'NotEndswith'
p471
sa(dp472
g12
(lp473
(dp474
g15
(lp475
g429
asg2
g18
sg19
g20
sg7
S'\n        This class provides an operator to check if an integer is not greater than the value passed as argument.\n\n        @param x: integer to compare\n        @type x: float or integer\n        '
p476
sa(dp477
g15
(lp478
g436
asg2
g18
sg19
g437
sg7
S'\n        Compare y with x\n        If y is not greater than x, returns True\n\n        @param y: integer to compare\n        @type y: float or integer\n\n        @return: True if greater \n        @rtype: boolean\n        '
p479
sasg2
g22
sg19
S'NotGreaterThan'
p480
sa(dp481
g12
(lp482
(dp483
g15
(lp484
g429
asg2
g18
sg19
g20
sg7
S'\n        This class provides an operator to check if an integer is not lower than the value passed as argument.\n\n        @param x: integer to compare\n        @type x: float or integer\n        '
p485
sa(dp486
g15
(lp487
g436
asg2
g18
sg19
g437
sg7
S'\n        Compare y with x\n        If y is not lower than x, returns True\n\n        @param y: integer to compare\n        @type y: float or integer\n\n        @return: True if lower \n        @rtype: boolean\n        '
p488
sasg2
g22
sg19
S'NotLowerThan'
p489
sa(dp490
g12
(lp491
(dp492
g15
(lp493
g405
asg2
g18
sg19
g20
sg7
S'\n        This class provides an operator to not match a specific regular expression.\n\n        @param needle: the regular expression\n        @type needle: string\n        '
p494
sa(dp495
g15
(lp496
g412
asg2
g18
sg19
g413
sg7
S'\n        Seeking to not match the needle in the haystack\n        If needle not match, returns True. \n\n        @param haystack: the string to search in\n        @type haystack: string\n\n        @return: True if needle found on the start\n        @rtype: boolean\n        '
p497
sasg2
g22
sg19
S'NotRegEx'
p498
sa(dp499
g12
(lp500
(dp501
g15
(lp502
g405
asg2
g18
sg19
g20
sg7
S'\n        This class provides an operator to check if a string not starts with the characters passed as argument.\n\n        @param needle: the string to search\n        @type needle: string\n        '
p503
sa(dp504
g15
(lp505
g412
asg2
g18
sg19
g413
sg7
S'\n        Seeking needle in the haystack\n        If needle is not found, returns True. \n\n        @param haystack: the string to search in\n        @type haystack: string\n\n        @return: True if needle not found on the start\n        @rtype: boolean\n        '
p506
sasg2
g22
sg19
S'NotStartswith'
p507
sa(dp508
g12
(lp509
(dp510
g15
(lp511
g405
asg2
g18
sg19
g20
sg7
S"\n        This class provides an operator to match a specific regular expression.\n        \n        Special characters\n            \\   escape special characters\n            .   matches any character\n            ^   matches beginning of string\n            $   matches end of string\n            [5b-d]  matches any chars '5', 'b', 'c' or 'd'\n            [^a-c6]     matches any char except 'a', 'b', 'c' or '6'\n            R|S     matches either regex R or regex S\n            ()  creates a capture group and indicates precedence\n\n        Quantifiers\n            *   0 or more (append ? for non-greedy)\n            +   1 or more (append ? for non-greedy)\n            ?   0 or 1 (append ? for non-greedy)\n            {m}     exactly mm occurrences\n            {m, n}  from m to n. m defaults to 0, n to infinity\n            {m, n}?     from m to n, as few as possible\n\n        Special sequences\n            \\A  start of string\n            \x08  matches empty string at word boundary (between \\w and \\W)\n            \\B  matches empty string not at word boundary\n            \\d  digit\n            \\D  non-digit\n            \\s  whitespace: [\t\n\r\x0c\x0b]\n            \\S  non-whitespace\n            \\w  alphanumeric: [0-9a-zA-Z_]\n            \\W  non-alphanumeric\n            \\Z  end of string\n            \\g<id>  matches a previously defined group\n            (?iLmsux)   matches empty string, sets re.X flags\n            (?:...)     non-capturing version of regular parentheses\n            (?P...)     matches whatever matched previously named group\n            (?P=)   digit\n            (?#...)     a comment; ignored\n            (?=...)     lookahead assertion: matches without consuming\n            (?!...)     negative lookahead assertion\n            (?<=...)    lookbehind assertion: matches if preceded\n            (?<!...)    negative lookbehind assertion\n            (?(id)yes|no)   match 'yes' if group 'id' matched, else 'no'\n\n        @param needle: the regular expression to match\n        @type needle: string\n        "
p512
sa(dp513
g15
(lp514
g412
asg2
g18
sg19
g413
sg7
S'\n        Seeking to match the needle in the haystack\n        If needle match, returns True. \n\n        @param haystack: the string to search in\n        @type haystack: string\n\n        @return: True if needle found on the start\n        @rtype: boolean\n        '
p515
sasg2
g22
sg19
S'RegEx'
p516
sg7
S'\n    RegEx\n    '
p517
sa(dp518
g12
(lp519
(dp520
g15
(lp521
g405
asg2
g18
sg19
g20
sg7
S'\n        This class provides an operator to check if a string starts with the characters passed as argument.\n\n        @param needle: the string to search\n        @type needle: string\n        '
p522
sa(dp523
g15
(lp524
g412
asg2
g18
sg19
g413
sg7
S'\n        Seeking needle in the haystack\n        If needle is found, returns True. \n\n        @param haystack: the string to search in\n        @type haystack: string\n\n        @return: True if needle found on the start\n        @rtype: boolean\n        '
p525
sasg2
g22
sg19
S'Startswith'
p526
sasg2
g387
sg19
S'TestOperators'
p527
sg389
S'TestExecutorLib.TestOperatorsLib'
p528
sa(dp529
g7
S'The library provides some functions to access to the properties of the test.'
p530
sg9
(lp531
(dp532
g12
(lp533
(dp534
g15
(lp535
g19
asg2
g18
sg19
g158
sg7
S'\n        Get one specific test description by name passed as argument.\n\n        @param name: parameter name\n        @type name: string\n\n        @return: parameter value\n        @rtype: string, list, int\n        '
p536
sa(dp537
g15
(lp538
sg2
g18
sg19
S'descriptions'
p539
sg7
S'\n        Returns all descriptions parameters.\n\n        @return: descriptions as list\n        @rtype: list\n        '
p540
sasg2
g22
sg19
S'Design'
p541
sg7
S'\n    '
p542
sa(dp543
g12
(lp544
(dp545
g15
(lp546
g19
asg2
g18
sg19
S'input'
p547
sg7
S'\n        Get one specific test input parameter by name passed as argument.\n\n        @param name: parameter name\n        @type name: string\n\n        @return: parameter value\n        @rtype: string, list, int, boolean and more\n        '
p548
sa(dp549
g15
(lp550
sg2
g18
sg19
S'inputs'
p551
sg7
S'\n        Returns all inputs parameters.\n\n        @return: parameters\n        @rtype: list\n        '
p552
sa(dp553
g15
(lp554
g19
aS'value'
p555
asg2
g18
sg19
S'setInput'
p556
sg7
S'\n        Set the value of one specific test input parameter by name passed as argument.\n        Overwrite the test properties\n\n        @param name: parameter name\n        @type name: string\n\n        @param value: parameter value\n        @type name: undefined\n        '
p557
sasg2
g22
sg19
S'Inputs'
p558
sg7
S'\n    '
p559
sa(dp560
g12
(lp561
(dp562
g2
g18
sg15
(lp563
g33
aS'worksheet'
p564
aS'row'
p565
aS'column'
p566
asg47
(lp567
(g565
S'None'
p568
tp569
a(g566
S'None'
p570
tp571
asg19
S'excel'
p572
sg7
S'\n        Read excel file\n\n        @param data: excel data\n        @type data: string\n        \n        @param worksheet: worksheet name\n        @type worksheet: string\n        \n        @param row: row id\n        @type row: integer/none\n        \n        @param column: column id\n        @type column: integer/none\n        \n        @return: content\n        @rtype: string/none\n        '
p573
sa(dp574
g2
g18
sg15
(lp575
S'project'
p576
ag19
aS'subname'
p577
asg47
(lp578
(g577
g73
tp579
asg19
S'shared'
p580
sg7
S'\n        Get one specific shared parameter by name passed as argument.\n\n        @param project: project name\n        @type project: string\n\n        @param name: parameter name\n        @type name: string\n\n        @param subname: sub parameter name\n        @type subname: string\n            \n        @return: parameter value\n        @rtype: string, int, boolean, boolean and more\n        '
p581
sasg2
g22
sg19
S'Others'
p582
sg7
S'\n    '
p583
sasg2
g387
sg19
S'TestProperties'
p584
sg389
S'TestExecutorLib.TestPropertiesLib'
p585
sa(dp586
g7
S'The library provides validation of input text, generic or not.'
p587
sg9
(lp588
(dp589
g12
(lp590
(dp591
g15
(lp592
sg2
g18
sg19
g20
sg7
S'\n        Validator for emails, according to the RFC5322 and RFC3696 which returns True if the email is valid, and False otherwise.\n        '
p593
sa(dp594
g15
(lp595
S'email'
p596
asg2
g18
sg19
S'isValid'
p597
sg7
S'\n        Check if the format of the email gived as argument is valid\n\n        @param email: email to evaluate\n        @type email: unknown\n\n        @return: True if valid or False otherwise\n        @rtype: boolean\n        '
p598
sasg2
g22
sg19
S'Email'
p599
sa(dp600
g12
(lp601
(dp602
g15
(lp603
sg2
g18
sg19
g20
sg7
S'\n        This class provides a validator for float or can be also used to generate some random float number\n        '
p604
sa(dp605
g2
g18
sg15
(lp606
S'fmin'
p607
aS'fmax'
p608
asg47
(lp609
(g607
F0.0
tp610
a(g608
F10.0
tp611
asg19
S'getRandom'
p612
sg7
S'\n        Returns a floating-point random value from the interval [fmin,fmax]\n\n        @param fmin: minimun value of the interval\n        @type fmin: float\n\n        @param fmax: maximum value of the interval\n        @type fmax: float\n\n        @return:  a floating-point random value\n        @rtype: float\n        '
p613
sa(dp614
g15
(lp615
S'n'
p616
asg2
g18
sg19
g597
sg7
S'\n        Returns True if the argument n is valid, and False otherwise.\n\n        @param n: argument to evaluate\n        @type n: unknown\n\n        @return: valid or not\n        @rtype: boolean\n        '
p617
sasg2
g22
sg19
S'Float'
p618
sa(dp619
g12
(lp620
(dp621
g15
(lp622
sg2
g18
sg19
g20
sg7
S'\n        This class provides a validator for ftp url according to the rfc1738 which returns True if the ftp url is valid, and False otherwise.\n        '
p623
sa(dp624
g15
(lp625
S'url'
p626
asg2
g18
sg19
g597
sg7
S'\n        Check if the format of the ftp url gived as argument is valid\n\n        @param ftp: ftp url to evaluate\n        @type ftp: unknown\n\n        @return: valid or not\n        @rtype: boolean\n        '
p627
sasg2
g22
sg19
S'FtpUrl'
p628
sa(dp629
g12
(lp630
(dp631
g15
(lp632
sg2
g18
sg19
g20
sg7
S'\n        Validator for domain, according to the RFC1738 which returns True if the hostname is valid, and False otherwise.\n        '
p633
sa(dp634
g15
(lp635
S'hostname'
p636
asg2
g18
sg19
g597
sg7
S'\n        Check if the format of the hostname gived as argument is valid\n\n        @param hostname: hostname to evaluate\n        @type hostname: unknown\n\n        @return: valid or not\n        @rtype: boolean\n        '
p637
sasg2
g22
sg19
S'Hostname'
p638
sa(dp639
g12
(lp640
(dp641
g15
(lp642
sg2
g18
sg19
g20
sg7
S'\n        This class provides a validator for http url according to the rfc1738 which returns True if the http url is valid, and False otherwise.\n        '
p643
sa(dp644
g2
g18
sg15
(lp645
g626
aS'https'
p646
asg47
(lp647
(g646
I00
tp648
asg19
g597
sg7
S'\n        Check if the format of the http url gived as argument is valid\n\n        @param url: http url to evaluate\n        @type url: unknown\n\n        @param https: secure http\n        @type https: boolean\n\n        @return: valid or not\n        @rtype: boolean\n        '
p649
sasg2
g22
sg19
S'HttpUrl'
p650
sa(dp651
g12
(lp652
(dp653
g2
g18
sg15
(lp654
S'separator'
p655
asg47
(lp656
(g655
S'.'
p657
tp658
asg19
g20
sg7
S'\n        This class provides a validator for ip v4 address or can be also used to generate random ip or more.\n\n        @param separator: separator (default=.)\n        @type separator: string\n        '
p659
sa(dp660
g15
(lp661
sg2
g18
sg19
S'getBroadcast'
p662
sg7
S'\n        Return a broadcast IP address (255.255.255.255)\n\n        @return: ip address\n        @rtype: string\n        '
p663
sa(dp664
g15
(lp665
sg2
g18
sg19
S'getLocalhost'
p666
sg7
S'\n        Return a localhost IP address\n\n        @return: ip address\n        @rtype: string\n        '
p667
sa(dp668
g15
(lp669
sg2
g18
sg19
S'getNull'
p670
sg7
S'\n        Return a null IP address (0.0.0.0)\n\n        @return: ip v4 address\n        @rtype: string\n        '
p671
sa(dp672
g15
(lp673
sg2
g18
sg19
g612
sg7
S'\n        Return a random IP address\n\n        @return: ip address\n        @rtype: string\n        '
p674
sa(dp675
g15
(lp676
S'ip'
p677
asg2
g18
sg19
g597
sg7
S'\n        Check if the format of the ip gived as argument is valid\n\n        @param ip: ip to evaluate\n        @type ip: unknown\n\n        @return: valid or not\n        @rtype: boolean\n        '
p678
sa(dp679
g15
(lp680
g677
asg2
g18
sg19
S'toList'
p681
sg7
S'\n        Return IP address as a list of integer\n        0.0.0.0 -> [ 0, 0, 0, 0 ]\n\n        @param ip: ip address\n        @type ip: string\n\n        @return: ip address as a list\n        @rtype: list\n        '
p682
sasg2
g22
sg19
S'IPv4Address'
p683
sa(dp684
g12
(lp685
(dp686
g15
(lp687
sg2
g18
sg19
g20
sg7
S'\n        This class provides a validator for ip v6 address.\n        '
p688
sa(dp689
g15
(lp690
g677
asg2
g18
sg19
g597
sg7
S'\n        Check if the format of the ip gived as argument is valid\n\n        @param ip: ip to evaluate\n        @type ip: unknown\n\n        @return: valid or not\n        @rtype: boolean\n        '
p691
sasg2
g22
sg19
S'IPv6Address'
p692
sa(dp693
g12
(lp694
(dp695
g15
(lp696
sg2
g18
sg19
g20
sg7
S'\n        This class provides a validator for integer or can be also used to generate some random integer.\n        '
p697
sa(dp698
g2
g18
sg15
(lp699
S'imin'
p700
aS'imax'
p701
asg47
(lp702
(g700
I0
tp703
a(g701
I10
tp704
asg19
g612
sg7
S'\n        Returns an integral random value from the interval [imin,imax]\n\n        @param imin: minimun value of the interval\n        @type imin: integer\n\n        @param imax: maximum value of the interval\n        @type imax: integer\n\n        @return:  an integral random value\n        @rtype: integer\n        '
p705
sa(dp706
g15
(lp707
g616
asg2
g18
sg19
g597
sg7
S'\n        Returns True if the argument n is valid, and False otherwise.\n\n        @param n: argument to evaluate\n        @type n: unknown\n\n        @return: valid or not\n        @rtype: boolean\n        '
p708
sasg2
g22
sg19
S'Integer'
p709
sa(dp710
g12
(lp711
(dp712
g2
g18
sg15
(lp713
g655
asg47
(lp714
(g655
S':'
p715
tp716
asg19
g20
sg7
S'\n        This class provides a validator for mac address or can be also used to generate random mac or more.\n\n        @param separator: separator (default=:)\n        @type separator: string\n        '
p717
sa(dp718
g15
(lp719
sg2
g18
sg19
g662
sg7
S'\n        Return a broadcast (FF) MAC address\n\n        @return: mac address\n        @rtype: string\n        '
p720
sa(dp721
g15
(lp722
sg2
g18
sg19
g670
sg7
S'\n        Return a null (00) MAC address\n\n        @return: mac address\n        @rtype: string\n        '
p723
sa(dp724
g15
(lp725
sg2
g18
sg19
g612
sg7
S'\n        Return a random mac address\n\n        @return: mac address\n        @rtype: string\n        '
p726
sa(dp727
g15
(lp728
S'mac'
p729
asg2
g18
sg19
g597
sg7
S'\n        Check if the format of the mac gived as argument is valid\n\n        @param mac: mac to evaluate\n        @type mac: unknown\n\n        @return: valid or not\n        @rtype: boolean\n        '
p730
sa(dp731
g15
(lp732
g729
asg2
g18
sg19
g681
sg7
S'\n        Return MAC address as a list of integer\n        00:00:00:00:00:00 -> [ 0, 0, 0, 0, 0, 0 ]\n\n        @param mac: mac address\n        @type mac: string\n\n        @return: mac address as a list\n        @rtype: list\n        '
p733
sasg2
g22
sg19
S'MacAddress'
p734
sa(dp735
g12
(lp736
(dp737
g15
(lp738
sg2
g18
sg19
g20
sg7
S'\n        This class provides a validator for string or can be also used to generate some random string with different combinations of characters.\n        '
p739
sa(dp740
g15
(lp741
S'strVal'
p742
asg2
g18
sg19
S'containsDigits'
p743
sg7
S'\n        Evaluate the argument strVal and return the number of digits detected\n\n        @param strVal: string to evaluate\n        @type strVal: string\n\n        @return: number of digits\n        @rtype: integer\n        '
p744
sa(dp745
g15
(lp746
g742
asg2
g18
sg19
S'containsLowerCase'
p747
sg7
S'\n        Evaluate the argument strVal and return the number of letters detected in lower case\n\n        @param strVal: string to evaluate\n        @type strVal: string\n\n        @return: number of letters in lowercase\n        @rtype: integer\n        '
p748
sa(dp749
g15
(lp750
g742
asg2
g18
sg19
S'containsPunctuations'
p751
sg7
S'\n        Evaluate the argument strVal and return the number of punctuation detected\n\n        @param strVal: string to evaluate\n        @type strVal: string\n\n        @return: number of punctuation\n        @rtype: integer\n        '
p752
sa(dp753
g15
(lp754
g742
asg2
g18
sg19
S'containsUpperCase'
p755
sg7
S'\n        Evaluate the argument strVal and return the number of letters detected in upper case\n\n        @param strVal: string to evaluate\n        @type strVal: string\n\n        @return: number of letters in uppercase\n        @rtype: integer\n        '
p756
sa(dp757
g15
(lp758
g742
asg2
g18
sg19
S'containsWhitespaces'
p759
sg7
S'\n        Evaluate the argument strVal and return the number of whitespace detected\n\n        @param strVal: string to evaluate\n        @type strVal: string\n\n        @return: number of whitespace\n        @rtype: integer\n        '
p760
sa(dp761
g2
g18
sg15
(lp762
S'length'
p763
aS'withLetterLowerCase'
p764
aS'withLetterUpperCase'
p765
aS'withPunctuation'
p766
aS'withDigits'
p767
aS'withWhitespace'
p768
aS'withHexdigits'
p769
asg47
(lp770
(g763
I8
tp771
a(g764
I01
tp772
a(g765
I01
tp773
a(g766
I00
tp774
a(g767
I00
tp775
a(g768
I00
tp776
a(g769
I00
tp777
asg19
g612
sg7
S'\n        Get a random string with various combination of characters\n\n        @param length: string output length\n        @type length: integer\n\n        @param withLetterLowerCase: \'abcdefghijklmnopqrstuvwxyz\'\n        @type withLetterLowerCase: boolean\n\n        @param withLetterUpperCase: \'ABCDEFGHIJKLMNOPQRSTUVWXYZ\'\n        @type withLetterUpperCase: boolean\n\n        @param withPunctuation: !"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~\n        @type withPunctuation: boolean\n\n        @param withDigits: \'0123456789\'\n        @type withDigits: boolean\n\n        @param withWhitespace: authorize whitespace\n        @type withWhitespace: boolean\n\n        @param withHexdigits: \'0123456789abcdefABCDEF\'.\n        @type withHexdigits: boolean\n\n        @return: a random string of the length passed as argument\n        @rtype: string\n        '
p778
sa(dp779
g15
(lp780
g742
asg2
g18
sg19
g597
sg7
S'\n        Returns True if the argument strVal is valid, and False otherwise.\n\n        @param strVal: argument to evaluate\n        @type strVal: unknown\n\n        @return: valid or not\n        @rtype: boolean\n        '
p781
sasg2
g22
sg19
S'String'
p782
sa(dp783
g12
(lp784
(dp785
g15
(lp786
sg2
g18
sg19
g20
sg7
S'\n        This class provides a validator for uri according to the rfc3986 which returns True if the uri is valid, and False otherwise.\n        '
p787
sa(dp788
g15
(lp789
S'uri'
p790
asg2
g18
sg19
g597
sg7
S'\n        Check if the format of the uri gived as argument is valid\n\n        @param uri: uri to evaluate\n        @type uri: unknown\n\n        @return: valid or not\n        @rtype: boolean\n        '
p791
sasg2
g22
sg19
S'Uri'
p792
sasg2
g387
sg19
S'TestValidators'
p793
sg389
S'TestExecutorLib.TestValidatorsLib'
p794
sa(dp795
g7
S'This library enable to create template messages.'
p796
sg9
(lp797
(dp798
g12
(lp799
(dp800
g2
g18
sg15
(lp801
g17
asg47
(lp802
(g17
S'None'
p803
tp804
asg19
g20
sg7
S'\n        Generic template accessor\n        \n        @param parent: the parent testcase\n        @type parent: testcase\n        '
p805
sa(dp806
g15
(lp807
S'template'
p808
ag171
asg2
g18
sg19
S'compare'
p809
sg7
S'\n        Compare templates\n\n        @param template: template message or layer\n        @type template: templatemessage/templatelayer\n\n        @param expected: template message or layer\n        @type expected: templatemessage/templatelayer\n\n        @return: result of the comparaison\n        @rtype: boolean\n        '
p810
sa(dp811
g15
(lp812
g808
asg2
g18
sg19
S'getRaw'
p813
sg7
S'\n        Return raw message from template\n\n        @param template: template message or layer\n        @type template: templatemessage/templatelayer\n\n        @return: raw message\n        @rtype: string\n        '
p814
sa(dp815
g2
g18
sg15
(lp816
g808
aS'layerName'
p817
aS'layerKey'
p818
aS'subLayerKey'
p819
aS'caseSensitive'
p820
asg47
(lp821
(g819
S'None'
p822
tp823
a(g820
I01
tp824
asg19
S'getValue'
p825
sg7
S'\n        Return value according to the layer name and key passed as argument\n\n        @param template: template message or layer\n        @type template: templatemessage/templatelayer\n\n        @param layerName: key name\n        @type layerName: string\n\n        @param layerKey: key name\n        @type layerKey: string\n\n        @param subLayerKey: sub key name\n        @type subLayerKey: string/none\n        \n        @param caseSensitive: the key is case sensitive is True\n        @type caseSensitive: boolean\n\n        @return: layer value as string or template layer\n        @rtype: string/templatelayer/none\n        '
p826
sa(dp827
g15
(lp828
g19
ag33
asg2
g18
sg19
S'prepareLayer'
p829
sg7
S'\n        Prepare the template layer according to the data\n\n        @param name: layer name\n        @type name: string\n\n        @param data: layer data\n        @type data: dict/list\n\n        @return: the template layer\n        @rtype: templatelayer\n        '
p830
sasg2
g22
sg19
S'Template'
p831
sa(dp832
g12
(lp833
(dp834
g15
(lp835
g19
asg2
g18
sg19
g20
sg7
S'\n        A template layer is a tuple with the name of the layer and the associated value.\n\n        @param name: layer name\n        @type name: string/integer\n        '
p836
sa(dp837
g15
(lp838
g19
ag33
asg2
g18
sg19
S'addKey'
p839
sg7
S'\n        Add the key (name,data) to the layer\n\n        @param name: key name\n        @type name: string/integer\n\n        @param data: key value\n        @type data: string/integer/templatelayer\n        '
p840
sa(dp841
g15
(lp842
S'more'
p843
asg2
g18
sg19
S'addMore'
p844
sg7
S'\n        Add more \n\n        @param more: key, name data\n        @type more: dict\n        '
p845
sa(dp846
g15
(lp847
g359
asg2
g18
sg19
S'addRaw'
p848
sg7
S'\n        Add the raw layer\n\n        @param raw: raw template layer\n        @type raw: string\n        '
p849
sa(dp850
g2
g18
sg15
(lp851
S'key'
p852
ag820
asg47
(lp853
(g852
S'None'
p854
tp855
a(g820
I01
tp856
asg19
g43
sg7
S'\n        Get the value of the key passed as argument.\n        Returns None if the key is not found.\n        If no arguments are passed, then this function returns the template message as a tuple of (string,dict)\n\n        @param key: key name\n        @type key: string/none\n\n        @param caseSensitive: the key is case sensitive is True\n        @type caseSensitive: boolean\n\n        @return: value associated to the key\n        @rtype: string/none/tuple\n        '
p857
sa(dp858
g2
g18
sg15
(lp859
g852
ag820
asg47
(lp860
(g852
S'None'
p861
tp862
a(g820
I01
tp863
asg19
S'getInt'
p864
sg7
S'\n        Identical to the function get\n        But force to return the value as integer\n\n        @param key: key name\n        @type key: string/none\n\n        @param caseSensitive: the key is case sensitive is True\n        @type caseSensitive: boolean\n\n        @return: value associated to the key\n        @rtype: integer/none/tuple\n        '
p865
sa(dp866
g15
(lp867
sg2
g18
sg19
S'getItems'
p868
sg7
S'\n        Returns items as list [ (key,value), ... ]\n\n        @return: layer data\n        @rtype: list\n        '
p869
sa(dp870
g15
(lp871
sg2
g18
sg19
S'getKeys'
p872
sg7
S'\n        Returns layer key only\n\n        @return: layer keys \n        @rtype: list\n        '
p873
sa(dp874
g15
(lp875
sg2
g18
sg19
S'getLenItems'
p876
sg7
S'\n        Return the length data\n\n        @return: layer data length\n        @rtype: integer\n        '
p877
sa(dp878
g15
(lp879
sg2
g18
sg19
S'getName'
p880
sg7
S'\n        Returns the name of the layer\n\n        @return: layer name\n        @rtype: string\n        '
p881
sa(dp882
g15
(lp883
sg2
g18
sg19
g813
sg7
S'\n        Return the template layer as raw\n\n        @return: raw message\n        @rtype: string\n        '
p884
sa(dp885
g15
(lp886
sg2
g18
sg19
S'getValues'
p887
sg7
S'\n        Returns layer values only\n\n        @return: layer values\n        @rtype: list\n        '
p888
sa(dp889
g15
(lp890
g19
asg2
g18
sg19
S'removeKey'
p891
sg7
S'\n        Remove the key name from the layer\n\n        @param name: key name\n        @type name: string\n        '
p892
sa(dp893
g15
(lp894
g19
ag33
asg2
g18
sg19
S'updateKey'
p895
sg7
S'\n        Update the key (name,data) to the layer\n\n        @param name: key name\n        @type name: string\n\n        @param data: key value\n        @type data: string/templatelayer\n        '
p896
sa(dp897
g15
(lp898
g19
asg2
g18
sg19
S'updateName'
p899
sg7
S'\n        Update the name of the layer\n\n        @param name: name of the layer\n        @type name: string\n        '
p900
sasg2
g22
sg19
S'TemplateLayer'
p901
sa(dp902
g12
(lp903
(dp904
g15
(lp905
sg2
g18
sg19
g20
sg7
S'\n        Template Message\n        This is a list of TemplateLayer\n        '
p906
sa(dp907
g15
(lp908
S'layer'
p909
asg2
g18
sg19
S'addLayer'
p910
sg7
S'\n        Add a layer to the template message\n\n        @param layer: layer\n        @type layer: templatelayer\n        '
p911
sa(dp912
g15
(lp913
g359
asg2
g18
sg19
g848
sg7
S'\n        Add the raw message\n\n        @param raw: raw template message\n        @type raw: string\n        '
p914
sa(dp915
g2
g18
sg15
(lp916
g19
ag852
aS'keyCaseSensitive'
p917
asg47
(lp918
(g19
S'None'
p919
tp920
a(g852
S'None'
p921
tp922
a(g917
I01
tp923
asg19
g43
sg7
S'\n        Get the value of the key and the layer <name>\n        If no arguments are passed, then this function returns the template message as a list of tuple.\n        Returns None if the key and the <name> are not found.\n\n        @param name: layer name\n        @type name: string/none\n\n        @param key: key name\n        @type key: string/none\n\n        @param keyCaseSensitive: the key is case sensitive is True\n        @type keyCaseSensitive: boolean\n\n        @return: value associated to the key\n        @rtype: string/list/none/templatelayer\n        '
p924
sa(dp925
g2
g18
sg15
(lp926
g19
ag852
ag917
asg47
(lp927
(g19
S'None'
p928
tp929
a(g852
S'None'
p930
tp931
a(g917
I01
tp932
asg19
g864
sg7
S'\n        Identical to the function get\n        But force to return the value as integer\n\n        @param name: layer name\n        @type name: string/none\n\n        @param key: key name\n        @type key: string/none\n\n        @param keyCaseSensitive: the key is case sensitive is True\n        @type keyCaseSensitive: boolean\n\n        @return: value associated to the key\n        @rtype: integer/none/templatelayer\n        '
p933
sa(dp934
g15
(lp935
g19
asg2
g18
sg19
S'getLayer'
p936
sg7
S'\n        Get a layer from the template message by the name\n\n        @param name: layer name\n        @type name: string\n\n        @return: templatelayer\n        @rtype: none/templatelayer\n        '
p937
sa(dp938
g15
(lp939
sg2
g18
sg19
g813
sg7
S'\n        Return the template message as raw\n\n        @return: raw message\n        @rtype: string\n        '
p940
sasg2
g22
sg19
S'TemplateMessage'
p941
sasg2
g387
sg19
S'TestTemplates'
p942
sg389
S'TestExecutorLib.TestTemplatesLib'
p943
sa(dp944
g7
S'The library provides somes importants manipulators.'
p945
sg9
(lp946
(dp947
g12
(lp948
(dp949
g15
(lp950
sg2
g18
sg19
g20
sg7
S'\n        This class provides an manipulator for integer\n        '
p951
sa(dp952
g15
(lp953
S'a'
p954
aS'b'
p955
asg2
g18
sg19
S'minus'
p956
sg7
S'\n        Compute a minus b\n\n        @param a: number a\n        @type a: integer\n\n        @param b: number b\n        @type b: integer\n\n        @return: result of the subtraction\n        @rtype: integer\n        '
p957
sa(dp958
g15
(lp959
g954
ag955
asg2
g18
sg19
S'multiply'
p960
sg7
S'\n        Compute a multiply b\n\n        @param a: number a\n        @type a: integer\n\n        @param b: number b\n        @type b: integer\n\n        @return: result of the multiplication\n        @rtype: integer\n        '
p961
sa(dp962
g15
(lp963
g954
ag955
asg2
g18
sg19
S'plus'
p964
sg7
S'\n        Compute a plus b\n\n        @param a: number a\n        @type a: integer\n\n        @param b: number b\n        @type b: integer\n\n        @return: result of the addition\n        @rtype: integer\n        '
p965
sa(dp966
g15
(lp967
S'num'
p968
asg2
g18
sg19
S'toString'
p969
sg7
S'\n        Convert integer to string\n        \n        @param num: integer to convert in string\n        @type num: integer\n\n        @return: num converted to string\n        @rtype: string\n        '
p970
sasg2
g22
sg19
g709
sg7
S'\n    Integer\n    '
p971
sa(dp972
g12
(lp973
(dp974
g15
(lp975
sg2
g18
sg19
g20
sg7
S'\n        This class provides an manipulator for string\n        '
p976
sa(dp977
g2
g18
sg15
(lp978
g954
ag955
ag655
asg47
(lp979
(g655
g73
tp980
asg19
S'concatenate'
p981
sg7
S'\n        Concatene b to a\n\n        @param a: the string a\n        @type a: string\n\n        @param b: the string b\n        @type b: string\n\n        @param separator: string separator (default is empty)\n        @type separator: string\n\n        @return: string concatenated\n        @rtype: string\n        '
p982
sa(dp983
g15
(lp984
g355
asg2
g18
sg19
S'toInteger'
p985
sg7
S'\n        Convert string to integer\n        \n        @param txt: the string to convert\n        @type tx: string\n\n        @return: string converted to integer\n        @rtype: integer\n        '
p986
sasg2
g22
sg19
g782
sg7
S'\n    String\n    '
p987
sasg2
g387
sg19
S'TestManipulators'
p988
sg389
S'TestExecutorLib.TestManipulatorsLib'
p989
sa(dp990
g7
S'The library enable to create test reporting in realtime.'
p991
sg9
(lp992
(dp993
g12
(lp994
(dp995
g15
(lp996
S'id'
p997
ag196
ag171
aS'action'
p998
aS'verdict'
p999
asg2
g18
sg19
g20
sg7
S'\n        Step descriptor\n        '
p1000
sa(dp1001
g15
(lp1002
sg2
g18
sg19
g998
sg7
S'\n        Return the action\n        \n        @return: step action\n        @rtype: string\n        '
p1003
sa(dp1004
g15
(lp1005
sg2
g18
sg19
g171
sg7
S'\n        Return the expected\n        \n        @return: step expected\n        @rtype: string\n        '
p1006
sa(dp1007
g15
(lp1008
sg2
g18
sg19
g997
sg7
S'\n        Return ID\n        \n        @return: step id\n        @rtype: integer \n        '
p1009
sa(dp1010
g15
(lp1011
sg2
g18
sg19
g196
sg7
S'\n        Return the summary\n        \n        @return: step summary\n        @rtype: string\n        '
p1012
sa(dp1013
g15
(lp1014
sg2
g18
sg19
g999
sg7
S'\n        Return the verdict\n        \n        @return: step verdict\n        @rtype: string\n        '
p1015
sasg2
g22
sg19
g203
sa(dp1016
g12
(lp1017
(dp1018
g15
(lp1019
g997
ag19
aS'root'
p1020
ag17
aS'steps'
p1021
ag999
asg2
g18
sg19
g20
sg7
S'\n        Testcase descriptor\n        '
p1022
sa(dp1023
g15
(lp1024
sg2
g18
sg19
g997
sg7
S'\n        Return ID\n\n        @return: testcase id\n        @rtype: integer \n        '
p1025
sa(dp1026
g15
(lp1027
sg2
g18
sg19
g19
sg7
S'\n        Return the name\n\n        @return: testcase name\n        @rtype: string \n        '
p1028
sa(dp1029
g15
(lp1030
sg2
g18
sg19
g17
sg7
S'\n        Return the parent name\n        \n        @return: parent name\n        @rtype: string \n        '
p1031
sa(dp1032
g15
(lp1033
sg2
g18
sg19
g1021
sg7
S'\n        Return all steps\n        \n        @return: list of steps\n        @rtype: list \n        '
p1034
sa(dp1035
g15
(lp1036
sg2
g18
sg19
g999
sg7
S'\n        Return the verdict\n\n        @return: testcase verdict\n        @rtype: string \n        '
p1037
sasg2
g22
sg19
g297
sa(dp1038
g12
(lp1039
(dp1040
g15
(lp1041
sg2
g18
sg19
g20
sg7
S'\n        Get all testcases as an iterator.\n        Iterate on each testcase to get the verdict.\n        '
p1042
sasg2
g22
sg19
S'TestCases'
p1043
sasg2
g387
sg19
S'TestReporting'
p1044
sg389
S'TestExecutorLib.TestReportingLib'
p1045
sa(dp1046
g7
S'The library enable to handle repositories.'
p1047
sg9
(lp1048
(dp1049
g12
(lp1050
(dp1051
g15
(lp1052
sg2
g18
sg19
S'adapters'
p1053
sg7
S'\n        Return adapters path\n\n        @return: path\n        @rtype: string\n        '
p1054
sa(dp1055
g15
(lp1056
sg2
g18
sg19
S'tests'
p1057
sg7
S'\n        Return tests path\n\n        @return: path\n        @rtype: string\n        '
p1058
sasg2
g22
sg19
S'Paths'
p1059
sg7
S'\n    '
p1060
sasg2
g387
sg19
S'TestRepositories'
p1061
sg389
S'TestExecutorLib.TestRepositoriesLib'
p1062
sa(dp1063
g7
S'The library provides some important functionalities to create adapters.'
p1064
sg9
(lp1065
(dp1066
g12
(lp1067
(dp1068
g2
g18
sg15
(lp1069
g17
ag19
ag389
aS'debug'
p1070
aS'showEvts'
p1071
aS'showSentEvts'
p1072
aS'showRecvEvts'
p1073
ag580
aS'agentSupport'
p1074
aS'agent'
p1075
aS'timeoutSleep'
p1076
aS'caller'
p1077
aS'agentType'
p1078
asg47
(lp1079
(g389
S'None'
p1080
tp1081
a(g1070
I00
tp1082
a(g1071
I01
tp1083
a(g1072
I01
tp1084
a(g1073
I01
tp1085
a(g580
I00
tp1086
a(g1074
I00
tp1087
a(g1075
S'None'
p1088
tp1089
a(g1076
F0.1
tp1090
a(g1077
S'None'
p1091
tp1092
a(g1078
S'None'
p1093
tp1094
asg19
g20
sg7
S'\n        All adapters must inherent from this class\n\n        @param parent: the parent testcase\n        @type parent: testcase\n\n        @param name: adapter type name\n        @type name: string\n\n        @param realname: adapter name\n        @type realname: string/None\n\n        @param agentSupport: use agent or not (default=False)\n        @type agentSupport: boolean\n\n        @param agent: agent name (default=None)\n        @type agent: none/dict\n\n        @param debug: True to activate debug mode, default value=False\n        @type debug: boolean\n        \n        @param shared: True to activate shared mode, default value=False\n        @type shared: boolean\n        '
p1095
sa(dp1096
g2
g18
sg15
(lp1097
g355
ag359
asg47
(lp1098
(g359
I01
tp1099
asg19
g1070
sg7
S'\n        Display an debug message\n\n        @param txt: debug message\n        @type txt: string\n        '
p1100
sa(dp1101
g2
g18
sg15
(lp1102
g355
ag356
ag357
ag358
ag359
asg47
(lp1103
(g356
I00
tp1104
a(g357
I00
tp1105
a(g358
I00
tp1106
a(g359
I00
tp1107
asg19
g365
sg7
S'\n        Display an error message\n        Nothing is displayed if txt=None\n\n        @param txt: error message\n        @type txt: string\n\n        @param bold: text is rendered as bold\n        @type bold: boolean\n\n        @param italic: text is rendered as italic\n        @type italic: boolean\n\n        @param raw: text is rendered as raw data, html otherwise (default=False)\n        @type raw: boolean\n        '
p1108
sa(dp1109
g15
(lp1110
sg2
g18
sg19
S'getAdapterId'
p1111
sg7
S'\n        Return the adapter id\n        '
p1112
sa(dp1113
g2
g18
sg15
(lp1114
g355
ag356
ag357
ag358
ag359
asg47
(lp1115
(g356
I00
tp1116
a(g357
I00
tp1117
a(g358
I00
tp1118
a(g359
I00
tp1119
asg19
g374
sg7
S'\n        Display an info message\n        Nothing is displayed if txt=None\n\n        @param txt: info message\n        @type txt: string\n\n        @param bold: text is rendered as bold (default=False)\n        @type bold: boolean\n\n        @param italic: text is rendered as italic (default=False)\n        @type italic: boolean\n\n        @param raw: text is rendered as raw data, html otherwise (default=False)\n        @type raw: boolean\n        '
p1120
sa(dp1121
g15
(lp1122
S'shortEvt'
p1123
aS'tplEvt'
p1124
asg2
g18
sg19
S'logRecvEvent'
p1125
sg7
S'\n        Log the received event from the SUT\n\n        @param shortEvt: short resume of the event\n        @type shortEvt: string\n\n        @param tplEvt: event received\n        @type tplEvt: templatemessage\n        '
p1126
sa(dp1127
g15
(lp1128
g1123
ag1124
asg2
g18
sg19
S'logSentEvent'
p1129
sg7
S'\n        Log the event sent to the SUT\n\n        @param shortEvt: short resume of the event\n        @type shortEvt: string\n\n        @param tplEvt: event sent\n        @type tplEvt: templatemessage\n        '
p1130
sa(dp1131
g15
(lp1132
sg2
g18
sg19
S'onReset'
p1133
sg7
S'\n        On reset, called automatically by framework\n        Function to overwrite\n        '
p1134
sa(dp1135
g15
(lp1136
sg2
g18
sg19
S'onRun'
p1137
sg7
S'\n        Function to reimplement\n        '
p1138
sa(dp1139
g15
(lp1140
g86
asg2
g18
sg19
S'privateAddFolder'
p1141
sg7
S'\n        Add folder in the private area of the adapter\n\n        @param folder: folder name to add\n        @type folder: string\n        '
p1142
sa(dp1143
g15
(lp1144
g91
ag33
asg2
g18
sg19
S'privateAppendFile'
p1145
sg7
S'\n        Append binary data. These data are accessible in the archives.\n\n        @param destname: destination name\n        @type destname: string\n\n        @param data: data to save\n        @type data: string\n        '
p1146
sa(dp1147
g15
(lp1148
g96
asg2
g18
sg19
S'privateGetFile'
p1149
sg7
S'\n        Get file in private area\n        \n        @param filename: filename to read\n        @type filename: string\n        \n        @return: file contetn\n        @rtype: string\n        '
p1150
sa(dp1151
g15
(lp1152
sg2
g18
sg19
S'privateGetPath'
p1153
sg7
S'\n        Return path to access to the private area of the adapter\n        \n        @return: public path\n        @rtype: string\n        '
p1154
sa(dp1155
g15
(lp1156
g91
ag33
asg2
g18
sg19
S'privateSaveFile'
p1157
sg7
S'\n        Storing binary data. These data are accessible in the archives.\n\n        @param destname: destination name\n        @type destname: string\n\n        @param data: data to save\n        @type data: string\n        '
p1158
sa(dp1159
g2
g18
sg15
(lp1160
g171
ag66
ag252
ag254
asg47
(lp1161
(g252
I01
tp1162
a(g254
I00
tp1163
asg19
S'received'
p1164
sg7
S'\n        '
p1165
sa(dp1166
g15
(lp1167
g33
asg2
g18
sg19
S'receivedDataFromAgent'
p1168
sg7
S'\n        Received data from agent\n        Function to reimplement\n        '
p1169
sa(dp1170
g15
(lp1171
g33
asg2
g18
sg19
S'receivedErrorFromAgent'
p1172
sg7
S'\n        Received error from agent\n        Function to reimplement\n        '
p1173
sa(dp1174
g15
(lp1175
g33
asg2
g18
sg19
S'receivedNotifyFromAgent'
p1176
sg7
S'\n        Received notify from agent\n        Function to reimplement\n        '
p1177
sa(dp1178
g15
(lp1179
sg2
g18
sg19
S'setRunning'
p1180
sg7
S'\n        Start to run the <onRun> function\n        '
p1181
sa(dp1182
g15
(lp1183
sg2
g18
sg19
S'stopRunning'
p1184
sg7
S'\n        Stop adapter\n        '
p1185
sa(dp1186
g15
(lp1187
sg2
g18
sg19
S'testcase'
p1188
sg7
S'\n        Accessor to the testcase\n        '
p1189
sa(dp1190
g15
(lp1191
sg2
g18
sg19
S'unsetRunning'
p1192
sg7
S'\n        Stop to run the <onRun> function\n        '
p1193
sa(dp1194
g2
g18
sg15
(lp1195
g355
ag356
ag357
ag358
ag359
asg47
(lp1196
(g356
I00
tp1197
a(g357
I00
tp1198
a(g358
I00
tp1199
a(g359
I00
tp1200
asg19
g383
sg7
S'\n        Display an debug message\n        Nothing is displayed if txt=None\n\n        @param txt: text message\n        @type txt: string\n\n        @param bold: text is rendered as bold (default=False)\n        @type bold: boolean\n\n        @param italic: text is rendered as italic (default=False)\n        @type italic: boolean\n\n        @param raw: text is rendered as raw data, html otherwise (default=False)\n        @type raw: boolean\n        '
p1201
sasg2
g22
sg19
S'Adapter'
p1202
sg7
S'\n    Adapter class\n    '
p1203
sa(dp1204
g12
(lp1205
(dp1206
g15
(lp1207
g17
ag19
aS'initial'
p1208
asg2
g18
sg19
g20
sg7
S'\n        State manager\n\n        @param parent: parent adapter\n        @type parent: adapter\n\n        @param name: automaton name\n        @type name: string\n\n        @param initial: initial state\n        @type initial: string\n        '
p1209
sa(dp1210
g15
(lp1211
sg2
g18
sg19
g43
sg7
S'\n        Returns the current state\n        \n        @return: current state\n        @rtype: string\n        '
p1212
sa(dp1213
g15
(lp1214
S'state'
p1215
asg2
g18
sg19
g57
sg7
S'\n        Set the state\n\n        @param state: state\n        @type state: string\n        '
p1216
sasg2
g22
sg19
S'State'
p1217
sg7
S'\n    '
p1218
sa(dp1219
g12
(lp1220
(dp1221
g2
g18
sg15
(lp1222
g17
aS'duration'
p1223
ag19
aS'callback'
p1224
aS'logEvent'
p1225
ag141
aS'callbackArgs'
p1226
asg47
(lp1227
(g1225
I01
tp1228
a(g141
I01
tp1229
a(g1226
(dp1230
tp1231
asg19
g20
sg7
S'\n        Timer\n        \n        @param parent: adapter\n        @type parent: adapter\n\n        @param duration: time to wait in seconds\n        @type duration: float\n\n        @param name: timer description\n        @type name: string\n\n        @param callback: callback function\n        @type callback: function\n\n        @param logEvent: log timer events (default=True)\n        @type logEvent: boolean\n\n        @param enabled: timer enabled (default=True)\n        @type enabled: boolean\n        \n        @param callbackArgs: arguments to the callback function\n        @type callbackArgs: dict\n        '
p1232
sa(dp1233
g15
(lp1234
sg2
g18
sg19
S'restart'
p1235
sg7
S'\n        Restart the timer before the end\n        '
p1236
sa(dp1237
g15
(lp1238
sg2
g18
sg19
S'setDisable'
p1239
sg7
S'\n        Disable the timer\n        '
p1240
sa(dp1241
g15
(lp1242
g1223
asg2
g18
sg19
S'setDuration'
p1243
sg7
S'\n        Set the duration\n\n        @param duration: time to wait in seconds\n        @type duration: float\n        '
p1244
sa(dp1245
g15
(lp1246
sg2
g18
sg19
S'setEnable'
p1247
sg7
S'\n        Enable the timer\n        '
p1248
sa(dp1249
g15
(lp1250
sg2
g18
sg19
g201
sg7
S'\n        Start the timer\n        '
p1251
sa(dp1252
g15
(lp1253
sg2
g18
sg19
S'stop'
p1254
sg7
S'\n        Stop the timer before the end\n        '
p1255
sasg2
g22
sg19
g349
sg7
S'\n    Timer object\n    '
p1256
sasg2
g387
sg19
S'SutAdapter'
p1257
sg389
S'TestExecutorLib.TestAdapterLib'
p1258
sa(dp1259
g7
S'The library provides some important functionalities to create library.'
p1260
sg9
(lp1261
(dp1262
g12
(lp1263
(dp1264
g2
g18
sg15
(lp1265
g17
ag19
ag389
ag1070
ag1071
ag1072
ag1073
ag580
asg47
(lp1266
(g389
S'None'
p1267
tp1268
a(g1070
I00
tp1269
a(g1071
I01
tp1270
a(g1072
I01
tp1271
a(g1073
I01
tp1272
a(g580
I00
tp1273
asg19
g20
sg7
S'\n        All libraries must inherent from this class\n\n        @param parent: the parent testcase\n        @type parent: testcase\n\n        @param name: library name\n        @type name: string\n\n        @param debug: True to activate debug mode, default value=False\n        @type debug: boolean\n        \n        @param shared: True to activate shared mode, default value=False\n        @type shared: boolean\n        '
p1274
sa(dp1275
g15
(lp1276
sg2
g18
sg19
g1188
sg7
S'\n        Accessor to the testcase\n        '
p1277
sasg2
g22
sg19
S'Library'
p1278
sg7
S'\n    Library\n    '
p1279
sasg2
g387
sg19
S'SutLibrary'
p1280
sg389
S'TestExecutorLib.TestLibraryLib'
p1281
sasg19
S'TestLibrary'
p1282
sg7
S'General library.'
p1283
sa.