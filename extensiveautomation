#!/usr/bin/python

# -------------------------------------------------------------------
# Copyright (c) 2010-2019 Denis Machard
# This file is part of the extensive automation project
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
# MA 02110-1301 USA
# -------------------------------------------------------------------

from optparse import OptionParser
import sys
import platform

import ServerEngine.AutomationServer as Core
from ServerControls import CliFunctions as Cli

# checking python version before to start the server
if sys.version_info[0] == 2:
    if sys.version_info[1] <= 6:
        print("Python %s not supported" % platform.python_version() )
        sys.exit(2)
elif sys.version_info[0] == 3:
    if sys.version_info[1] < 5:
        print("Python %s not supported" % platform.python_version() )
        sys.exit(2)
else:
    print("Python %s not supported" % platform.python_version() )
    sys.exit(2)

# prepare the command line with all options	
parser = OptionParser()
parser.set_usage("./run [start|stop|restart|reload|version|install_adapter|decodetrx|apikey]")

parser.add_option('--start', dest='start', default=False, 
                    action='store_true', 
                    help="Start the server.")
parser.add_option('--stop', dest='stop', default=False, 
                    action='store_true', 
                    help="Stop the server.")
parser.add_option('--status', dest='status', default=False, 
                    action='store_true', 
                    help='Show the current status of the server.')
parser.add_option('--reload', dest='reload', default=False, 
                    action='store_true', 
                    help='Reload the configuration of the server.')
parser.add_option('--version', dest='version', default=False, 
                    action='store_true', 
                    help='Show the version.')
parser.add_option('--apikey', dest='apikey', default=False, 
                    action='store_true', 
                    help='Generate key for rest api (argument: <username>)' )
parser.add_option('--decodetrx', dest='decodetrx', default=False, 
                    action='store_true', 
                    help='Decode trx file (argument: <file>)' )  
parser.add_option('--install_adapter', dest='install_adapter', default=False, 
                    action='store_true', 
                    help='Install sut adapter (argument: <plugin name>)' )                      
(options, args) = parser.parse_args()

if __name__ == "__main__":
    Core.initialize()
    
    if options.start == True :
        Core.start()
        
    elif options.stop == True:
        Core.stop()
        
    elif options.version == True:
        Cli.instance().version()
        
    elif options.status == True:
        Core.status()
        
    elif options.reload == True:
        Cli.instance().reload()

    elif options.apikey == True:
        if not len(args):
            parser.print_help()
            sys.exit(2)
        Cli.instance().generateKey(username=args[0])
        
    elif options.decodetrx == True:
        if not len(args):
            parser.print_help()
            sys.exit(2)
        Cli.instance().decodeTrx(filename=args[0])

    elif options.install_adapter == True:
        if not len(args):
            parser.print_help()
            sys.exit(2)
        Cli.instance().installAdapter(name=args[0])   
        
    else:
        parser.print_help()
        sys.exit(2)
        
    sys.exit(0)