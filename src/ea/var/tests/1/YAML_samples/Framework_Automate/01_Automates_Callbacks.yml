properties:
  descriptions:
    author: admin
    name: TESTCASE
    requirement: REQ_01
    summary: Just a basic sample.
  parameters:
  - description: ''
    name: DEBUG
    scope: local
    type: bool
    value: 'False'
  - description: ''
    name: TIMEOUT
    scope: local
    type: float
    value: '1.0'
  - description: ''
    name: VERBOSE
    scope: local
    type: bool
    value: 'True'
testunit: |2-

  def description(self):
      # testcase description
      self.setPurpose(purpose="Testcase sample")

      # steps description
      self.step1 = self.addStep(expected="result expected", description="step description", summary="step sample", enabled=True)
  def prepare(self):
      self.AUTOMATE = self.findAdapter("TEST")
      if self.AUTOMATE is None: self.abort("automate (1) not available")

      self.AUTOMATE2 = self.findAdapter("TEST2")
      if self.AUTOMATE2 is None: self.abort("automate (2) not available")

      self.AUTOMATE.onCallback = self.onAutomate
      self.AUTOMATE2.onCallback = self.onAutomate2
  def cleanup(self, aborted):
      pass
  def definition(self):
      # starting initial step
      if self.step1.isEnabled():
          self.step1.start()
          Timer(self).wait(timeout=10)
          self.step1.setPassed(actual="success")
  def onAutomate(self):
      self.warning( "event message from automate (1)" )
  #   self.AUTOMATE.setKO()
      self.AUTOMATE.setOK()

  def onAutomate2(self):
      self.warning( "event message from automate (2)" )
      self.AUTOMATE2.setOK()
