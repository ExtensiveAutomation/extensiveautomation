properties:
  descriptions:
    author: denis
    requirement: REQ_01
    summary: |-
      Just a basic sample.
      Just a basic sample.
  parameters:
  - description: |-
      Just a list of integer
      and another new line
    name: VAR_1
    scope: local
    type: list
    value: 4,1,4,3,5,6
  - description: ''
    name: VAR_2
    scope: local
    type: str
    value: example
  - description: ''
    name: VAR_3
    scope: local
    type: int
    value: '2'
  - description: ''
    name: VAR_4
    scope: local
    type: bool
    value: 'True'
  - description: ''
    name: VAR_5
    scope: local
    type: float
    value: '-3.0'
  - description: ''
    name: VAR_6
    scope: local
    type: bool
    value: 'False'
  - description: ''
    name: VAR_7
    scope: local
    type: date
    value: 03/06/2012
  - description: ''
    name: VAR_8
    scope: local
    type: time
    value: '18:09:41'
  - description: ''
    name: VAR_9
    scope: local
    type: date-time
    value: 03/06/2012 18:09:44
testsuite: |2-

  class GET_DESCRIPTION_AUTHOR(TestCase):
      def description(self):
          self.step1 = self.addStep(expected="result expected", description="step description", summary="step sample", enabled=True)
      def prepare(self):
          pass
      def cleanup(self, aborted):
          pass
      def definition(self):
          self.step1.start()

          self.info( description('Author') )

          self.step1.setPassed(actual="success")

  class GET_DESCRIPTION_DATE(TestCase):
      def description(self):
          self.step1 = self.addStep(expected="result expected", description="step description", summary="step sample", enabled=True)
      def prepare(self):
          pass
      def cleanup(self, aborted):
          pass
      def definition(self):
          self.step1.start()

          self.info( description('creation date') )

          self.step1.setPassed(actual="success")

  class GET_DESCRIPTION_SUMMARY(TestCase):
      def description(self):
          self.step1 = self.addStep(expected="result expected", description="step description", summary="step sample", enabled=True)
      def prepare(self):
          pass
      def cleanup(self, aborted):
          pass
      def definition(self):
          self.step1.start()

          self.info( description('summary') )

          self.step1.setPassed(actual="success")

  class GET_DESCRIPTION_PREREQUISITES(TestCase):
      def description(self):
          self.step1 = self.addStep(expected="result expected", description="step description", summary="step sample", enabled=True)
      def prepare(self):
          pass
      def cleanup(self, aborted):
          pass
      def definition(self):
          self.step1.start()

          self.info( description('prerequisites') )

          self.step1.setPassed(actual="success")

  class GET_DESCRIPTION_COMMENTS(TestCase):
      def description(self):
          self.step1 = self.addStep(expected="result expected", description="step description", summary="step sample", enabled=True)
      def prepare(self):
          pass
      def cleanup(self, aborted):
          pass
      def definition(self):
          self.step1.start()

          self.info( description('comments') )

          self.step1.setPassed(actual="success")


  GET_DESCRIPTION_AUTHOR().execute()
  GET_DESCRIPTION_DATE().execute()
  GET_DESCRIPTION_SUMMARY().execute()
  GET_DESCRIPTION_PREREQUISITES().execute()
  GET_DESCRIPTION_COMMENTS().execute()
