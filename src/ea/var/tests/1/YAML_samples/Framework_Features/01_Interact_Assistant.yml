properties:
  descriptions:
    author: admin
    name: TESTCASE
    requirement: REQ_01
    summary: Just a basic sample.
  parameters:
  - description: ''
    name: DEBUG
    scope: local
    type: bool
    value: 'False'
  - description: ''
    name: EXPECTED_STRING
    scope: local
    type: str
    value: ''
  - description: ''
    name: FWK_ASK_2
    scope: local
    type: str
    value: Your message ?
  - description: ''
    name: FWK_ASK_KEY_2
    scope: local
    type: str
    value: msg
  - description: ''
    name: FWK_CHECK_3
    scope: local
    type: alias
    value: EXPECTED_STRING
  - description: ''
    name: FWK_CHECK_KEY_3
    scope: local
    type: str
    value: msg
  - description: ''
    name: FWK_TEXT_1
    scope: local
    type: str
    value: begin
  - description: ''
    name: FWK_TEXT_4
    scope: local
    type: str
    value: end
  - description: ''
    name: TIMEOUT_FWK
    scope: local
    type: float
    value: '30.0'
testunit: |2-

  def description(self):
      # testcase description
      self.setPurpose(purpose="Testcase generated by test assistant")

      # steps description
      self.step1 = self.addStep(expected="Action(s) executed with success", description="", summary="", enabled=True)

  def prepare(self):
      # adapters and libraries definitions
      pass



  def definition(self):
      if self.step1.isEnabled():
          self.step1.start()

          ##CAPTURE_FRAMEWORK>
          self.info(txt=input('FWK_TEXT_1'))

          ##CAPTURE_FRAMEWORK>
          FWK_RET2 = Interact(self).interact(ask=input('FWK_ASK_2'), timeout=input('TIMEOUT_FWK'), default=None, cache=input('FWK_ASK_KEY_2'))
          if not FWK_RET2:
              self.abort("Unable to ")

          ##CAPTURE_FRAMEWORK>
          FWK_RET3 = TestOperators.Contains(needle=input('FWK_CHECK_3')).seekIn(haystack=Cache().get(name=input('FWK_CHECK_KEY_3')))
          if not FWK_RET3:
              self.abort("Unable to ")

          ##CAPTURE_FRAMEWORK>
          self.info(txt=input('FWK_TEXT_4'))

          self.step1.setPassed("test terminated")

  def cleanup(self, aborted):
      if aborted: self.step1.setFailed(aborted)
