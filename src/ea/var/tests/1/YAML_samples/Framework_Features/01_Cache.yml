properties:
  descriptions:
    author: admin
    requirement: REQ_01
    summary: Just a basic sample.
  parameters:
  - description: ''
    name: DEBUG
    scope: local
    type: bool
    value: 'False'
  - description: ''
    name: REGEXP
    scope: local
    type: custom
    value: .*session_id=[!CAPTURE:SESSIONID:.*?:];.*
  - description: ''
    name: TIMEOUT
    scope: local
    type: float
    value: '1.0'
testsuite: |2-


  class TESTCASE_CACHE(TestCase):
      def description(self):
          self.step1 = self.addStep(expected="result expected", description="step description", summary="step sample", enabled=True)

      def prepare(self):
          pass
      def cleanup(self, aborted):
          pass
      def definition(self):
          if self.step1.isEnabled():
              self.step1.start()

              data = [2, 3, {"de": 1}]
              key = "my key"
              Cache().set(name=key, data=data)

              cache = Cache().get(name=key)
              self.info( "data from cache: %s" % cache)

              deleted = Cache().delete(name=key)
              if not deleted:
                  self.error( "unable to delete data from cache" )

              cache = Cache().get(name=key)
              self.info( "data from cache: %s" % cache)

              Cache().reset()

              self.step1.setPassed(actual="success")
  class TESTCASE_CACHE_CAPTURE(TestCase):
      def description(self):
          self.step1 = self.addStep(expected="result expected", description="step description", summary="step sample", enabled=True)

      def prepare(self):
          pass
      def cleanup(self, aborted):
          pass
      def definition(self):
          if self.step1.isEnabled():
              self.step1.start()

              my_data="March, 25 2017 07:38:58 AM"
              Cache().capture(data=my_data, regexp=".* (?P<TIME>\d{2}:\d{2}:\d{2}) .*")
              Trace(self).info( txt=Cache().get(name="TIME") )

              self.step1.setPassed(actual="success")
  class TESTCASE_CACHE_CAPTURE_CUSTOM(TestCase):
      def description(self):
          self.step1 = self.addStep(expected="result expected", description="step description", summary="step sample", enabled=True)

      def prepare(self):
          pass
      def cleanup(self, aborted):
          pass
      def definition(self):
          if self.step1.isEnabled():
              self.step1.start()

              h  = "Set-Cookie: session_id=Mjc5YTg1NjJjNDA3NDU5ZDliNDAwZWJiYjQxMmRjMDI5M;expires=Tue, 02-May-2017 19:43:26 GMT; path=/"
              Cache().capture(data=h, regexp=input('REGEXP'))

              session_id =Cache().get(name="SESSIONID")
              self.warning( "session_id: %s" % session_id)


              self.step1.setPassed(actual="success")


  TESTCASE_CACHE(suffix=None).execute()
  TESTCASE_CACHE_CAPTURE(suffix=None).execute()
  TESTCASE_CACHE_CAPTURE_CUSTOM(suffix=None).execute()
