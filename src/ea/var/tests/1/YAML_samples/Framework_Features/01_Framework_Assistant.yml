properties:
  descriptions:
    author: admin
    name: TESTCASE
    requirement: REQ_01
    summary: Just a basic sample.
  parameters:
  - description: ''
    name: DEBUG
    scope: local
    type: bool
    value: 'False'
  - description: ''
    name: FWK_ASK_8
    scope: local
    type: str
    value: Hello, your name ?
  - description: ''
    name: FWK_ASK_KEY_8
    scope: local
    type: str
    value: MY_NAME
  - description: ''
    name: FWK_CACHE_KEY_3
    scope: local
    type: str
    value: MY_KEY
  - description: ''
    name: FWK_CACHE_VALUE_3
    scope: local
    type: str
    value: hello
  - description: ''
    name: FWK_CHECK_6
    scope: local
    type: str
    value: hello
  - description: ''
    name: FWK_CHECK_7
    scope: local
    type: alias
    value: MY_ALIAS
  - description: ''
    name: FWK_CHECK_KEY_6
    scope: local
    type: str
    value: MY_KEY
  - description: ''
    name: FWK_CHECK_KEY_7
    scope: local
    type: str
    value: MY_KEY
  - description: ''
    name: FWK_TEXT_1
    scope: local
    type: alias
    value: MY_ALIAS
  - description: ''
    name: FWK_TEXT_2
    scope: local
    type: str
    value: hello world
  - description: ''
    name: FWK_WAIT_5
    scope: local
    type: int
    value: '3'
  - description: ''
    name: MY_ALIAS
    scope: local
    type: str
    value: ll
  - description: ''
    name: TIMEOUT_FWK
    scope: local
    type: float
    value: '30.0'
testunit: |2-

  def description(self):
      # testcase description
      self.setPurpose(purpose="Testcase generated by test assistant")

      # steps description
      self.step1 = self.addStep(expected="Action(s) executed with success", description="", summary="", enabled=True)

  def prepare(self):
      # adapters and libraries definitions
      pass



  def definition(self):
      if self.step1.isEnabled():
          self.step1.start()

          ##CAPTURE_FRAMEWORK>
          self.info(txt=input('FWK_TEXT_1'))

          ##CAPTURE_FRAMEWORK>
          self.warning(txt=input('FWK_TEXT_2'))

          ##CAPTURE_FRAMEWORK>
          Cache().set(flag=True, name=input('FWK_CACHE_KEY_3'),data=input('FWK_CACHE_VALUE_3'))

          ##CAPTURE_USER>

          ##CAPTURE_USER_END>
          ##CAPTURE_FRAMEWORK>
          self.wait(timeout=input('FWK_WAIT_5'))

          ##CAPTURE_FRAMEWORK>
          FWK_RET6 = TestOperators.Contains(needle=input('FWK_CHECK_6')).seekIn(haystack=Cache().get(name=input('FWK_CHECK_KEY_6')))
          if not FWK_RET6:
              self.abort("Unable to ")

          ##CAPTURE_FRAMEWORK>
          FWK_RET7 = TestOperators.Contains(needle=input('FWK_CHECK_7')).seekIn(haystack=Cache().get(name=input('FWK_CHECK_KEY_7')))
          if not FWK_RET7:
              self.abort("Unable to ")

          ##CAPTURE_FRAMEWORK>
          FWK_RET8 = Interact(self).interact(ask=input('FWK_ASK_8'), timeout=input('TIMEOUT_FWK'), default=None, cache=input('FWK_ASK_KEY_8'))
          if not FWK_RET8:
              self.abort("Unable to ")

          ##CAPTURE_FRAMEWORK>
          Cache().reset()

          self.step1.setPassed("test terminated")

  def cleanup(self, aborted):
      if aborted: self.step1.setFailed(aborted)
