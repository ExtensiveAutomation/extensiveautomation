properties:
  descriptions:
    author: admin
    name: OPEN APP
    requirement: REQ_01
    summary: Just a basic sample.
  parameters:
  - description: ''
    name: AGENT_GUI
    scope: local
    type: json
    value: '{"name": "agent.win.selenium01", "type": "sikulixserver"}'
  - description: Type the name of the app to open
    name: APP_PATH
    scope: local
    type: str
    value: ''
  - description: ''
    name: DEBUG
    scope: local
    type: bool
    value: 'False'
  - description: Type the name of the app to open
    name: TEXT_2
    scope: local
    type: alias
    value: APP_PATH
  - description: ''
    name: TIMEOUT_GUI
    scope: local
    type: float
    value: '15.0'
testunit: |2-

  def description(self):
      # testcase description
      self.setPurpose(purpose="GUI_Automation_Capture")

      # steps description
      self.step1 = self.addStep(expected="Action executed with success",
                                description="Open run command",
                                summary="Open run command", enabled=True)
      self.step2 = self.addStep(expected="Action executed with success",
                                description="Type the name of the app to open",
                                summary="Type the name of the app to open", enabled=True)
      self.step3 = self.addStep(expected="Action executed with success",
                                description="Open the app", summary="Open the app", enabled=True)

  def prepare(self):
      # adapters and libraries definitions
      self.ADP_GUI = SutAdapters.GUI.Sikuli(parent=self,
                                            agent=input('AGENT_GUI'),
                                            debug=input('DEBUG'))

  def definition(self):
      ##CAPTURE>Open run command
      if self.step1.isEnabled():
          self.step1.start()
          actionId = self.ADP_GUI.typeShorcut(key=SutAdapters.GUI.KEY_WIN, modifier=None, special=None, other='r', repeat=0)
          if not self.ADP_GUI.isActionAccepted(timeout=input('TIMEOUT_GUI'), actionId=actionId):
              self.step1.setFailed("Unable to open run command")
          else:
              self.step1.setPassed("Executing with success: open run command")

      ##CAPTURE>Type the name of the app to open
      if self.step2.isEnabled():
          self.step2.start()
          actionId = self.ADP_GUI.typePath( text=input('TEXT_2'), description="Type the name of the app to open" )
          if not self.ADP_GUI.isActionAccepted(timeout=input('TIMEOUT_GUI'), actionId=actionId):
              self.step2.setFailed("Unable to type the name of the app to open")
          else:
              self.step2.setPassed("Executing with success: type the name of the app to open")

      ##CAPTURE>Open the app
      if self.step3.isEnabled():
          self.step3.start()
          actionId = self.ADP_GUI.typeShorcut(key=SutAdapters.GUI.KEY_ENTER, modifier=None, special=None, other=None, repeat=0)
          if not self.ADP_GUI.isActionAccepted(timeout=input('TIMEOUT_GUI'), actionId=actionId):
              self.step3.setFailed("Unable to open the app")
          else:
              self.step3.setPassed("Executing with success: open the app")
  def cleanup(self, aborted):
      pass
