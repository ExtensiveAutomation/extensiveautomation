properties:
  descriptions:
    author: admin
    name: TESTCASE
    requirement: REQ_01
    summary: Just a basic sample.
  parameters:
  - description: ''
    name: DEBUG
    scope: local
    type: bool
    value: 'False'
  - description: ''
    name: TIMEOUT
    scope: local
    type: float
    value: '1.0'
  - description: ''
    name: VERBOSE
    scope: local
    type: bool
    value: 'True'
  - description: ''
    name: XML_NAMESPACES
    scope: local
    type: text
    value: ''
  - description: ''
    name: XML_STR
    scope: local
    type: text
    value: |-
      <NewDataSet>
        <Table>
          <Country>France</Country>
          <City>Le Touquet</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Agen</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Cazaux</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Bordeaux / Merignac</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Bergerac</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Toulouse / Francazal</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Cognac</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>La Rochelle</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Poitiers</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Montlucon / Gueret</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Limoges</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Mont-De-Marsan</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Niort</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Toulouse / Blagnac</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Pau</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Biscarosse</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Tarbes / Ossun</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Brive</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Perigueux</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Dax</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Biarritz</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>St-Girons</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Albi</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Rodez</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Auch</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Suippes Range Met</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Le Puy</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Cassagnes-Begonhes</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Metz-Nancy-Lorraine</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Bastia</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Calvi</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Figari</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Ajaccio</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Solenzara</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Auxerre</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Chambery / Aix-Les-Bains</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Clermont-Ferrand</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Bourges</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Lyon / Satolas</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Macon</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Saint-Yan</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Montelimar</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Grenoble / St. Geoirs</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Vichy</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Aurillac</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Chateauroux</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Lyon / Bron</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Aix Les Milles</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Le Luc</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Cannes</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Nimes / Courbessac</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>St-Etienne Boutheon</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Istres</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Carcassonne</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Marseille / Marignane</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Nice</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Orange</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Perpignan</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Montpellier</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Beziers / Vias</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>St-Auban-Sur-Durance</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Salon</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Mende / Brenoux</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Beauvais</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Chateaudun</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Evreux</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Alencon</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>La Heve</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Abbeville</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Orleans</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Rouen</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Chartres</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Vittefleur / St. Vale</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Tours</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Saint-Quentin</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Paris / Le Bourget</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Creil Fafb</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Paris-Aeroport Charles De Gaulle</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Melun</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Toussus Le Noble</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Paris-Orly</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Villacoublay</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Paris Met Center</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Troyes</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Nevers</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Chatillon-Sur-Seine</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Cambrai</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Lille</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Charleville</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Angers</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Brest</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Cherbourg / Maupertus</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Dinard</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Lann Bihoue</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>La Roche-Sur-Yon</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Landivisiau</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Caen</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Lanveoc Poulmic</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Le Mans</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Rennes</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Lannion / Servel</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Quimper</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Nantes</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Saint-Brieuc</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Morlaix / Ploujean</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>St-Nazaire</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Besancon</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Bale-Mulhouse</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Colmar</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Dijon</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Metz / Frescaty</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>St-Dizier</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Toul / Rosieres</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Nancy / Essey</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Nancy / Ochey</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Belfort</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Reims</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Strasbourg</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Luxeuil</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Hyeres</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>St-Raphael</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Nimes / Garons</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Amberieu</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Apt / Saint Christol</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Romorantin</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Maopoopo Ile Futuna</City>
        </Table>
        <Table>
          <Country>France</Country>
          <City>Hihifo Ile Wallis</City>
        </Table>
      </NewDataSet>
  - description: ''
    name: XML_XPATH
    scope: local
    type: text
    value: "(//NewDataSet/Table)[1]/City\t[!CAPTURE:CITY:]"
testunit: |2-

  def description(self):
      # testcase description
      self.setPurpose(purpose=description('summary'))
      self.setRequirement(requirement=description('requirement'))

      # steps description
      self.step1 = self.addStep(
                                                                              expected="result expected",
                                                                              description="step description",
                                                                              summary="step sample",
                                                                              enabled=True
                                                                          )
  def prepare(self):
      self.msg_decodage = []

  def definition(self):

      # starting initial step
      if self.step1.isEnabled():
          self.step1.start()

          # import python libs
          try:
              import lxml
              from lxml import etree
          except ImportError:
              self.error("please to install the lxml library")
              self.abort("lxml python library is missing")

          valid = True
          try:
              etree.XML( bytes(input('XML_STR'), "utf8") )
          except:
              valid = False
          if not valid: self.abort("xml provided not valid" )

          xml_valid = True
          n = 1
          for line in input('XML_XPATH').splitlines():
              if line.startswith("#"): continue
              xpath_expected = re.split(r'\t+', line)
              if len(xpath_expected) != 2:
                  self.abort("bad expected body provided num=%s value=%s, expected <xpath>\\t<regexp>" % (n,line) )
              xpath, xvalue = xpath_expected

              xml_values = []
              try:
                  rootXML = etree.XML( bytes(input('XML_STR'), "utf8") )
                  findXML= etree.XPath(xpath, namespaces={})
                  retXML =  findXML(rootXML)

                  for el in retXML:
                      if isinstance(el, etree._Element ):
                          xml_values.append( "%s" % el.text)
                      else:
                          xml_values.append( "%s" % el )
              except Exception as e:
                  self.error('unable to get all xml values: %s' % str(e) )
                  xml_values = []

              if not len(xml_values):
                  self.msg_decodage.append( "Searching '%s' with the value '%s' : KO" % (xpath, xvalue) )
                  xml_valid = False
              else:
                  xml_values_valid = True

                  # search capture regexp
                  cap = re.findall("\(\?P\<.*\>.*\)", xvalue)
                  param_input = re.findall("\[\!FROM\:INPUT\:.*\:\]", xvalue)
                  param_cache = re.findall("\[\!FROM\:CACHE\:.*\:\]", xvalue)

                  if cap :
                      cache_key = xvalue.split("(?P<")[1].split(">.*)")[0]
                      if len(xml_values) == 1:
                          Cache().capture(data="%s" % xml_values[0], regexp=xvalue)
                      else:
                          Cache().set(name=cache_key, data=xml_values, flag=False)
                      self.msg_decodage.append( "Searching and capture value of '%s' : OK" % (xpath) )
                  else:
                      if param_input :
                          input_key = xvalue.split("[!FROM:INPUT:")[1].split(":]")[0]
                          xvalue = input(name=input_key)

                      if param_cache :
                          cache_key = xvalue.split("[!FROM:CACHE:")[1].split(":]")[0]
                          xvalue = Cache().get(name=cache_key)
                          if xvalue is None: self.abort("the key %s does not exists in the cache" % cache_key)

                      for jv in xml_values:
                          jv = str(jv)
                          reg = TestOperators.RegEx(needle=xvalue)
                          if not reg.seekIn(haystack=jv):
                              self.msg_decodage.append( "Searching '%s' with the value '%s' : KO" % (xpath, xvalue) )
                              xml_values_valid = False
                              self.msg_decodage.append( " > received value: %s" % jv.encode("utf8") )
                      if xml_values_valid:
                          self.msg_decodage.append( "Searching '%s' with the value '%s' : OK" % (xpath, xvalue) )
                      else:
                          xml_valid = False
              n += 1

          # log messages to user
          for msg in self.msg_decodage:
              self.info(msg)

          if xml_valid:
              self.step1.setPassed(actual="XML is OK.<br />%s" % "<br />".join(self.msg_decodage) )
          else:
              self.step1.setFailed(actual="XML is KO.<br />%s" %  "<br />".join(self.msg_decodage))
  def cleanup(self, aborted):
      if aborted: self.step1.setFailed(actual="%s. %s" % (aborted, "<br />".join(self.msg_decodage) ) )
