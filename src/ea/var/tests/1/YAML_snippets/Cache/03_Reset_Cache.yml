properties:
  descriptions:
    author: admin
    name: TESTCASE
    requirement: REQ_01
    summary: Just a basic sample.
  parameters:
  - description: ''
    name: MESSAGES
    scope: local
    type: text
    value: "# display cache \n[!FROM:CACHE:EXAMPLE:]\n\n# log timeout input\n[!FROM:INPUT:TIMEOUT:]"
  - description: ''
    name: STEP_DESCRIPTION
    scope: local
    type: text
    value: Reset the cache
  - description: ''
    name: STEP_EXPECTED
    scope: local
    type: text
    value: Reset the cache
  - description: ''
    name: TEST_PURPOSE
    scope: local
    type: text
    value: Reset the cache
testunit: |2-

  def description(self):
      # testcase description
      self.setPurpose(purpose=input('TEST_PURPOSE'))
      self.setRequirement(requirement=description('requirement'))

      # steps description
      self.step1 = self.addStep(expected=input('STEP_EXPECTED'),
                                description=input('STEP_DESCRIPTION'),
                                summary=input('STEP_DESCRIPTION'),
                                enabled=True)
  def prepare(self):
      pass
      
  def definition(self):
      # starting initial step
      if self.step1.isEnabled():
          self.step1.start()
          Cache().reset()
          self.step1.setPassed(actual="success")
          
  def cleanup(self, aborted):
      if aborted: self.step1.setFailed(actual="%s" % aborted)
