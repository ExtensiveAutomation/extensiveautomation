properties:
  descriptions:
    author: admin
    name: TESTCASE
    requirement: REQ_01
    summary: Just a basic sample.
  parameters:
  - description: The result is automatically saved in the cache
    name: CACHE_KEY
    scope: local
    type: str
    value: uuid
testunit: |2-

  def description(self):
      # testcase description
      self.setPurpose(purpose=description('summary'))
      self.setRequirement(requirement=description('requirement'))

      # steps description
      self.step1 = self.addStep(expected="uuid generated",
                                description="generate uuid",
                                summary="generate uuid",
                                enabled=True)
                                
  def prepare(self):
          pass
          
  def definition(self):
      # starting initial step
      if self.step1.isEnabled():
          self.step1.start()

          import uuid
          u = uuid.uuid4()
          Cache().set(name=input('CACHE_KEY'), data=u, flag=False)
          self.warning("uuid: %s" % u)

          self.step1.setPassed(actual="success")
          
  def cleanup(self, aborted):
      if aborted: self.step1.setFailed(actual=aborted)
